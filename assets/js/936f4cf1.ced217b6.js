"use strict";(self.webpackChunkreact_native_iap_docs=self.webpackChunkreact_native_iap_docs||[]).push([[8835],{571:(e,n,t)=>{t.d(n,{A:()=>o});var r=t(6540),i=t(4848);function s({className:e="adfit",style:n,unit:t,height:s,width:o}){return(0,r.useEffect)(()=>{const n=setTimeout(()=>{const n=document.querySelector(`.${e}`);if(!n)return void console.warn(`AdFit: Element with class "${e}" not found`);const r=n.querySelectorAll(".kakao_ad_area"),i=n.querySelectorAll('script[src*="kas/static/ba.min.js"]');r.forEach(e=>e.remove()),i.forEach(e=>e.remove());const a=document.createElement("ins"),l=document.createElement("script");a.className="kakao_ad_area",a.style.cssText="display:none; width:100%;",l.async=!0,l.type="text/javascript",l.src="//t1.daumcdn.net/kas/static/ba.min.js",a.setAttribute("data-ad-width",o.toString()),a.setAttribute("data-ad-height",s.toString()),a.setAttribute("data-ad-unit",t),n.appendChild(a),n.appendChild(l)},100);return()=>clearTimeout(n)},[e,t,s,o]),(0,i.jsx)("div",{style:n,children:(0,i.jsx)("div",{className:e})})}function o(){return(0,i.jsx)(s,{unit:"DAN-YTmjDwlbcP42HBg6",height:100,width:320,className:"adfit-top",style:{flex:1,marginTop:24,marginBottom:24}})}},6074:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"installation","title":"Installation","description":"This guide will help you install and configure React Native IAP in your React Native or Expo project.","source":"@site/versioned_docs/version-14.1/installation.md","sourceDirName":".","slug":"/installation","permalink":"/react-native-iap/docs/14.1/installation","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/react-native-iap/tree/main/docs/versioned_docs/version-14.1/installation.md","tags":[],"version":"14.1","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/react-native-iap/docs/14.1/intro"},"next":{"title":"iOS Setup","permalink":"/react-native-iap/docs/14.1/getting-started/setup-ios"}}');var i=t(4848),s=t(8453),o=t(571);const a={sidebar_position:2},l="Installation",c={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Package Installation",id:"package-installation",level:2},{value:"Important for Expo Managed Workflow",id:"important-for-expo-managed-workflow",level:3},{value:"Platform Configuration",id:"platform-configuration",level:2},{value:"For Expo Managed Workflow",id:"for-expo-managed-workflow",level:3},{value:"For React Native CLI Projects",id:"for-react-native-cli-projects",level:3},{value:"iOS",id:"ios",level:4},{value:"Android",id:"android",level:4},{value:"Quick Start",id:"quick-start",level:2},{value:"1. Basic Setup",id:"1-basic-setup",level:3},{value:"2. Fetch Products",id:"2-fetch-products",level:3},{value:"3. Display Products",id:"3-display-products",level:3},{value:"4. Handle Purchases",id:"4-handle-purchases",level:3},{value:"5. Complete Transactions",id:"5-complete-transactions",level:3},{value:"Complete Basic Example",id:"complete-basic-example",level:3},{value:"Store Configuration",id:"store-configuration",level:2},{value:"Verification",id:"verification",level:2},{value:"Next Steps",id:"next-steps",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2}];function u(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"installation",children:"Installation"})}),"\n",(0,i.jsx)(o.A,{}),"\n",(0,i.jsx)(n.p,{children:"This guide will help you install and configure React Native IAP in your React Native or Expo project."}),"\n",(0,i.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsx)(n.p,{children:"Before installing React Native IAP, make sure you have:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"React Native 0.64 or later, or Expo SDK 45 or later"}),"\n",(0,i.jsx)(n.li,{children:"Node.js 16 or later"}),"\n",(0,i.jsx)(n.li,{children:"iOS 15+ for iOS apps (StoreKit 2 requirement)"}),"\n",(0,i.jsx)(n.li,{children:"Android API level 21+ for Android apps"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"package-installation",children:"Package Installation"}),"\n",(0,i.jsx)(n.p,{children:"Install the package using your favorite package manager:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install react-native-iap react-native-nitro-modules\n"})}),"\n",(0,i.jsx)(n.h3,{id:"important-for-expo-managed-workflow",children:"Important for Expo Managed Workflow"}),"\n",(0,i.jsxs)(n.p,{children:["If you're using the Expo managed workflow, you ",(0,i.jsx)(n.strong,{children:"must"})," use a ",(0,i.jsx)(n.a,{href:"https://docs.expo.dev/versions/latest/sdk/dev-client/",children:"custom development client"})," since in-app purchases require native modules that aren't available in Expo Go."]}),"\n",(0,i.jsx)(n.p,{children:"After installing the package, you need to:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Configure expo-build-properties for Android"})," (required for Kotlin 2.0+ support):"]}),"\n",(0,i.jsxs)(n.p,{children:["Starting from version 14.0.0-rc, react-native-iap supports Google Play Billing Library v8.0.0, which requires Kotlin 2.0+. Since ",(0,i.jsx)(n.code,{children:"expo-modules-core"})," doesn't support Kotlin 2.0 yet, you need to manually configure the Kotlin version."]}),"\n",(0,i.jsxs)(n.p,{children:["Add the following to your ",(0,i.jsx)(n.code,{children:"app.json"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "expo": {\n    "plugins": [\n      "react-native-iap",\n      [\n        "expo-build-properties",\n        {\n          "android": {\n            "kotlinVersion": "2.1.20"\n          }\n        }\n      ]\n    ]\n  }\n}\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Install the plugin and run prebuild"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npx expo prebuild --clean\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This will generate the native iOS and Android directories with the necessary configurations. Learn more about ",(0,i.jsx)(n.a,{href:"https://docs.expo.dev/guides/adopting-prebuild/",children:"adopting prebuild"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Create a development build"})," (see the Platform Configuration section below for details)"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"platform-configuration",children:"Platform Configuration"}),"\n",(0,i.jsx)(n.h3,{id:"for-expo-managed-workflow",children:"For Expo Managed Workflow"}),"\n",(0,i.jsxs)(n.p,{children:["If you're using Expo managed workflow, you'll need to create a ",(0,i.jsx)(n.a,{href:"https://docs.expo.dev/development/create-development-builds/",children:"custom development client"})," since in-app purchases require native modules that aren't available in Expo Go."]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Install EAS CLI"})," (if not already installed):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install -g eas-cli\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Create a development build"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"eas build --platform ios --profile development\neas build --platform android --profile development\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"for-react-native-cli-projects",children:"For React Native CLI Projects"}),"\n",(0,i.jsx)(n.h4,{id:"ios",children:"iOS"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Install pods"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd ios && pod install\n// or npx pod-install\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Add StoreKit capability"})," to your iOS app in Xcode:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Open your project in Xcode"}),"\n",(0,i.jsx)(n.li,{children:"Select your app target"}),"\n",(0,i.jsx)(n.li,{children:'Go to "Signing & Capabilities"'}),"\n",(0,i.jsx)(n.li,{children:'Click "+ Capability" and add "In-App Purchase"'}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"android",children:"Android"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Important:"})," Starting from version 14.0.0-rc, react-native-iap supports Google Play Billing Library v8.0.0, which requires Kotlin 2.0+."]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Configure Kotlin version"})," in your root ",(0,i.jsx)(n.code,{children:"android/build.gradle"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-gradle",children:'buildscript {\n    ext {\n        kotlinVersion = "2.1.20"\n    }\n    dependencies {\n        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"\n    }\n}\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Add billing dependencies"})," to your ",(0,i.jsx)(n.code,{children:"android/app/build.gradle"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-gradle",children:'dependencies {\n    implementation "com.android.billingclient:billing-ktx:8.0.0"\n    implementation "com.google.android.gms:play-services-base:18.1.0"\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,i.jsx)(n.h3,{id:"1-basic-setup",children:"1. Basic Setup"}),"\n",(0,i.jsx)(n.p,{children:"First, import and initialize the IAP hook:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {useIAP} from 'react-native-iap';\n\nfunction MyStore() {\n  const {\n    connected,\n    products,\n    fetchProducts,\n    requestPurchase,\n    currentPurchase,\n    finishTransaction,\n  } = useIAP();\n\n  const productIds = ['your.product.id', 'your.premium.subscription'];\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-fetch-products",children:"2. Fetch Products"}),"\n",(0,i.jsx)(n.p,{children:"Load your products when the store connects:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"useEffect(() => {\n  if (connected) {\n    // Fetch your products\n    fetchProducts({skus: productIds, type: 'in-app'});\n  }\n}, [connected]);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-display-products",children:"3. Display Products"}),"\n",(0,i.jsx)(n.p,{children:"Show available products to users:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"return (\n  <View>\n    <Text>Store Status: {connected ? 'Connected' : 'Connecting...'}</Text>\n\n    {products.map((product) => (\n      <View key={product.id} style={styles.productItem}>\n        <Text style={styles.productTitle}>{product.title}</Text>\n        <Text style={styles.productPrice}>{product.displayPrice}</Text>\n        <Button title=\"Buy Now\" onPress={() => handlePurchase(product.id)} />\n      </View>\n    ))}\n  </View>\n);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"4-handle-purchases",children:"4. Handle Purchases"}),"\n",(0,i.jsx)(n.p,{children:"Process purchase requests with our platform-specific API (v14.0.0-rc Current):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"const handlePurchase = async (productId: string) => {\n  try {\n    await requestPurchase({\n      request: {\n        ios: {\n          sku: productId,\n        },\n        android: {\n          skus: [productId],\n        },\n      },\n    });\n  } catch (error) {\n    console.error('Purchase failed:', error);\n  }\n};\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note:"})," No more Platform.OS checks! The new API automatically handles platform differences. iOS can only purchase one product at a time, while Android supports purchasing multiple products in a single transaction."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"5-complete-transactions",children:"5. Complete Transactions"}),"\n",(0,i.jsx)(n.p,{children:"Finish purchases when they complete:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"useEffect(() => {\n  if (currentPurchase) {\n    const completePurchase = async () => {\n      try {\n        // Grant the purchase to user here\n        console.log('Purchase completed:', currentPurchase.id);\n\n        // Finish the transaction\n        await finishTransaction({\n          purchase: currentPurchase,\n          isConsumable: true, // Set based on your product type\n        });\n      } catch (error) {\n        console.error('Failed to complete purchase:', error);\n      }\n    };\n\n    completePurchase();\n  }\n}, [currentPurchase]);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"complete-basic-example",children:"Complete Basic Example"}),"\n",(0,i.jsx)(n.p,{children:"Here's a complete working example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import React, {useEffect} from 'react';\nimport {View, Text, Button, StyleSheet} from 'react-native';\nimport {useIAP} from 'react-native-iap';\n\nexport default function SimpleStore() {\n  const {\n    connected,\n    products,\n    fetchProducts,\n    requestPurchase,\n    currentPurchase,\n    finishTransaction,\n  } = useIAP();\n\n  const productIds = ['com.example.coins.pack1', 'com.example.premium'];\n\n  useEffect(() => {\n    if (connected) {\n      fetchProducts({skus: productIds, type: 'in-app'});\n    }\n  }, [connected]);\n\n  useEffect(() => {\n    if (currentPurchase) {\n      const completePurchase = async () => {\n        try {\n          console.log('Purchase completed:', currentPurchase.id);\n          await finishTransaction({\n            purchase: currentPurchase,\n            isConsumable: true,\n          });\n        } catch (error) {\n          console.error('Failed to complete purchase:', error);\n        }\n      };\n      completePurchase();\n    }\n  }, [currentPurchase]);\n\n  const handlePurchase = async (productId: string) => {\n    try {\n      await requestPurchase({\n        request: {\n          ios: {\n            sku: productId,\n          },\n          android: {\n            skus: [productId],\n          },\n        },\n      });\n    } catch (error) {\n      console.error('Purchase failed:', error);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.status}>\n        Store: {connected ? 'Connected \u2705' : 'Connecting...'}\n      </Text>\n\n      {products.map((product) => (\n        <View key={product.id} style={styles.product}>\n          <Text style={styles.title}>{product.title}</Text>\n          <Text style={styles.price}>{product.displayPrice}</Text>\n          <Button title=\"Buy Now\" onPress={() => handlePurchase(product.id)} />\n        </View>\n      ))}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {padding: 20},\n  status: {fontSize: 16, marginBottom: 20},\n  product: {\n    padding: 15,\n    marginVertical: 5,\n    backgroundColor: '#f0f0f0',\n    borderRadius: 8,\n  },\n  title: {fontSize: 16, fontWeight: 'bold'},\n  price: {fontSize: 14, color: '#666', marginVertical: 5},\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"store-configuration",children:"Store Configuration"}),"\n",(0,i.jsx)(n.p,{children:"React Native IAP is OpenIAP compliant. For detailed instructions on setting up your products in each store:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"iOS"}),": ",(0,i.jsx)(n.a,{href:"https://www.openiap.dev/docs/ios-setup",children:"OpenIAP iOS Setup Guide"})," - App Store Connect configuration"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Android"}),": ",(0,i.jsx)(n.a,{href:"https://www.openiap.dev/docs/android-setup",children:"OpenIAP Android Setup Guide"})," - Google Play Console configuration"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"verification",children:"Verification"}),"\n",(0,i.jsx)(n.p,{children:"To verify that React Native IAP is properly installed, create a simple test:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {useIAP} from 'react-native-iap';\n\nfunction TestComponent() {\n  const {connected} = useIAP();\n\n  console.log('IAP Connection status:', connected);\n\n  return null;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"If everything is set up correctly, you should see the connection status logged in your console."}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsx)(n.p,{children:"Now that you have React Native IAP installed, you can:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"./getting-started/setup-ios",children:"Set up iOS configuration"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"./getting-started/setup-android",children:"Set up Android configuration"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"./guides/getting-started",children:"Learn basic usage"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsx)(n.p,{children:"If you encounter issues during installation:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Clear node_modules and reinstall"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"rm -rf node_modules\nnpm install\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"For iOS, clean and rebuild pods"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd ios\nrm -rf Pods Podfile.lock\npod install\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"For Expo projects"}),", use prebuild instead:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npx expo prebuild --clean\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"For React Native, reset Metro cache"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npx react-native start --reset-cache\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["For more help, check our ",(0,i.jsx)(n.a,{href:"./guides/troubleshooting",children:"Troubleshooting Guide"})," or ",(0,i.jsx)(n.a,{href:"https://github.com/hyochan/react-native-iap/issues",children:"open an issue"})," on GitHub."]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(6540);const i={},s=r.createContext(i);function o(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);