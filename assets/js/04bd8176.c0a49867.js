"use strict";(self.webpackChunkreact_native_iap_docs=self.webpackChunkreact_native_iap_docs||[]).push([[1927],{571:(e,i,n)=>{n.d(i,{A:()=>c});var s=n(6540),r=n(4848);function t({className:e="adfit",style:i,unit:n,height:t,width:c}){return(0,s.useEffect)(()=>{const i=setTimeout(()=>{const i=document.querySelector(`.${e}`);if(!i)return void console.warn(`AdFit: Element with class "${e}" not found`);const s=i.querySelectorAll(".kakao_ad_area"),r=i.querySelectorAll('script[src*="kas/static/ba.min.js"]');s.forEach(e=>e.remove()),r.forEach(e=>e.remove());const a=document.createElement("ins"),o=document.createElement("script");a.className="kakao_ad_area",a.style.cssText="display:none; width:100%;",o.async=!0,o.type="text/javascript",o.src="//t1.daumcdn.net/kas/static/ba.min.js",a.setAttribute("data-ad-width",c.toString()),a.setAttribute("data-ad-height",t.toString()),a.setAttribute("data-ad-unit",n),i.appendChild(a),i.appendChild(o)},100);return()=>clearTimeout(i)},[e,n,t,c]),(0,r.jsx)("div",{style:i,children:(0,r.jsx)("div",{className:e})})}function c(){return(0,r.jsx)(t,{unit:"DAN-YTmjDwlbcP42HBg6",height:100,width:320,className:"adfit-top",style:{flex:1,marginTop:24,marginBottom:24}})}},1213:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"examples/subscription-manager","title":"Subscription Management","description":"This guide demonstrates how to implement subscription management with React Native IAP, including subscription status checking, renewal handling, and subscription management UI.","source":"@site/versioned_docs/version-14.3/examples/subscription-manager.md","sourceDirName":"examples","slug":"/examples/subscription-manager","permalink":"/react-native-iap/docs/14.3/examples/subscription-manager","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/react-native-iap/tree/main/docs/versioned_docs/version-14.3/examples/subscription-manager.md","tags":[],"version":"14.3","sidebarPosition":2,"frontMatter":{"title":"Subscription Management","sidebar_label":"Subscriptions","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Complete Purchase","permalink":"/react-native-iap/docs/14.3/examples/complete-impl"},"next":{"title":"Sponsors","permalink":"/react-native-iap/docs/14.3/sponsors"}}');var r=n(4848),t=n(8453),c=n(571);const a={title:"Subscription Management",sidebar_label:"Subscriptions",sidebar_position:2},o="Subscription Management Example",l={},d=[{value:"Complete Example",id:"complete-example",level:2},{value:"Key Implementation Points",id:"key-implementation-points",level:2},{value:"Platform-Specific Subscription Properties",id:"platform-specific-subscription-properties",level:3},{value:"iOS Subscription Properties",id:"ios-subscription-properties",level:4},{value:"Android Subscription Properties",id:"android-subscription-properties",level:4},{value:"Key Differences",id:"key-differences",level:3},{value:"Basic Implementation Pattern",id:"basic-implementation-pattern",level:2},{value:"1. Load Subscriptions",id:"1-load-subscriptions",level:3},{value:"2. Check Active Subscription Status",id:"2-check-active-subscription-status",level:3},{value:"3. Handle Subscription Purchase",id:"3-handle-subscription-purchase",level:3},{value:"4. Process Successful Purchase",id:"4-process-successful-purchase",level:3},{value:"Server-Side Validation",id:"server-side-validation",level:2},{value:"Example Validation Endpoint",id:"example-validation-endpoint",level:3},{value:"Platform-Specific Features",id:"platform-specific-features",level:2},{value:"iOS Subscription Features",id:"ios-subscription-features",level:3},{value:"Android Subscription Features",id:"android-subscription-features",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Common Subscription Scenarios",id:"common-subscription-scenarios",level:2},{value:"Check if User Has Any Active Subscription",id:"check-if-user-has-any-active-subscription",level:3},{value:"Check for Specific Subscription Tier",id:"check-for-specific-subscription-tier",level:3},{value:"Display Subscription Expiration",id:"display-subscription-expiration",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"See Also",id:"see-also",level:2}];function p(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.header,{children:(0,r.jsx)(i.h1,{id:"subscription-management-example",children:"Subscription Management Example"})}),"\n",(0,r.jsx)(c.A,{}),"\n",(0,r.jsx)(i.p,{children:"This guide demonstrates how to implement subscription management with React Native IAP, including subscription status checking, renewal handling, and subscription management UI."}),"\n",(0,r.jsx)(i.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,r.jsx)(i.p,{children:"For a production-ready subscription implementation, please refer to our complete example:"}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsxs)(i.strong,{children:["\ud83d\udcf1 ",(0,r.jsx)(i.a,{href:"https://github.com/hyochan/react-native-iap/tree/main/example/screens/SubscriptionFlow.tsx",children:"SubscriptionFlow.tsx"})]})}),"\n",(0,r.jsx)(i.p,{children:"This example demonstrates:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"\u2705 Subscription product loading and display"}),"\n",(0,r.jsx)(i.li,{children:"\u2705 Active subscription detection"}),"\n",(0,r.jsx)(i.li,{children:"\u2705 Platform-specific subscription handling"}),"\n",(0,r.jsx)(i.li,{children:"\u2705 Auto-renewal status management"}),"\n",(0,r.jsx)(i.li,{children:"\u2705 Grace period handling"}),"\n",(0,r.jsx)(i.li,{children:"\u2705 Purchase restoration"}),"\n",(0,r.jsx)(i.li,{children:"\u2705 Error handling with retry logic"}),"\n",(0,r.jsx)(i.li,{children:"\u2705 Subscription status UI"}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"key-implementation-points",children:"Key Implementation Points"}),"\n",(0,r.jsx)(i.h3,{id:"platform-specific-subscription-properties",children:"Platform-Specific Subscription Properties"}),"\n",(0,r.jsx)(i.p,{children:"When checking subscription status, different platforms provide different properties:"}),"\n",(0,r.jsx)(i.h4,{id:"ios-subscription-properties",children:"iOS Subscription Properties"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:(0,r.jsx)(i.code,{children:"expirationDateIOS"})}),": Unix timestamp (milliseconds) when subscription expires"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:(0,r.jsx)(i.code,{children:"originalTransactionDateIOS"})}),": Original purchase date"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:(0,r.jsx)(i.code,{children:"environmentIOS"})}),": 'Production' or 'Sandbox'"]}),"\n"]}),"\n",(0,r.jsx)(i.h4,{id:"android-subscription-properties",children:"Android Subscription Properties"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:(0,r.jsx)(i.code,{children:"autoRenewingAndroid"})}),": Boolean indicating if subscription will auto-renew"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:(0,r.jsx)(i.code,{children:"purchaseStateAndroid"})}),": Purchase state (0 = purchased, 1 = canceled)"]}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"key-differences",children:"Key Differences"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"iOS"}),": Check ",(0,r.jsx)(i.code,{children:"expirationDateIOS"})," against current time to determine if active"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Android"}),": Check ",(0,r.jsx)(i.code,{children:"autoRenewingAndroid"})," - if false, the user has canceled"]}),"\n"]}),"\n",(0,r.jsxs)(i.p,{children:["\u26a0\ufe0f ",(0,r.jsx)(i.strong,{children:"Important"}),": Always validate subscription status on your server for production apps."]}),"\n",(0,r.jsx)(i.h2,{id:"basic-implementation-pattern",children:"Basic Implementation Pattern"}),"\n",(0,r.jsx)(i.h3,{id:"1-load-subscriptions",children:"1. Load Subscriptions"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-tsx",children:"import {useIAP} from 'react-native-iap';\n\nconst SUBSCRIPTION_IDS = ['com.app.monthly', 'com.app.yearly'];\n\nconst {\n  connected,\n  subscriptions,\n  activeSubscriptions,\n  fetchProducts,\n  getActiveSubscriptions,\n} = useIAP();\n\nuseEffect(() => {\n  if (connected) {\n    fetchProducts({skus: SUBSCRIPTION_IDS, type: 'subs'});\n    getActiveSubscriptions();\n  }\n}, [connected]);\n"})}),"\n",(0,r.jsx)(i.h3,{id:"2-check-active-subscription-status",children:"2. Check Active Subscription Status"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-tsx",children:"const checkSubscriptionStatus = async () => {\n  const subs = await getActiveSubscriptions();\n\n  // Check if user has specific subscription\n  const hasActiveSubscription = subs.some(\n    (sub) => sub.productId === 'com.app.monthly' && sub.isActive,\n  );\n\n  return hasActiveSubscription;\n};\n"})}),"\n",(0,r.jsx)(i.h3,{id:"3-handle-subscription-purchase",children:"3. Handle Subscription Purchase"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-tsx",children:"const handleSubscription = async (productId: string) => {\n  try {\n    await requestPurchase({\n      request: {\n        ios: {\n          sku: productId,\n          appAccountToken: 'user-123',\n        },\n        android: {\n          skus: [productId],\n          subscriptionOffers:\n            subscription?.subscriptionOfferDetails?.map((offer) => ({\n              sku: productId,\n              offerToken: offer.offerToken,\n            })) || [],\n        },\n      },\n      type: 'subs',\n    });\n  } catch (error) {\n    console.error('Subscription failed:', error);\n  }\n};\n"})}),"\n",(0,r.jsx)(i.h3,{id:"4-process-successful-purchase",children:"4. Process Successful Purchase"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-tsx",children:"const {finishTransaction} = useIAP({\n  onPurchaseSuccess: async (purchase) => {\n    // Validate receipt on your server\n    const isValid = await validateReceiptOnServer(purchase);\n\n    if (isValid) {\n      // Grant subscription benefits\n      await grantSubscriptionAccess(purchase);\n\n      // Finish the transaction\n      await finishTransaction({\n        purchase,\n        isConsumable: false, // Subscriptions are non-consumable\n      });\n    }\n  },\n});\n"})}),"\n",(0,r.jsx)(i.h2,{id:"server-side-validation",children:"Server-Side Validation"}),"\n",(0,r.jsx)(i.h3,{id:"example-validation-endpoint",children:"Example Validation Endpoint"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-javascript",children:"app.post('/validate-subscription', async (req, res) => {\n  const {receipt, productId, purchaseToken} = req.body;\n\n  try {\n    let validationResult;\n\n    if (purchaseToken) {\n      // Android: Validate with Google Play\n      validationResult = await validateGooglePlaySubscription(\n        productId,\n        purchaseToken,\n      );\n    } else {\n      // iOS: Validate with App Store\n      validationResult = await validateAppStoreReceipt(receipt);\n    }\n\n    res.json({\n      isActive: validationResult.isActive,\n      expirationDate: validationResult.expirationDate,\n      autoRenewing: validationResult.autoRenewing,\n    });\n  } catch (error) {\n    res.status(500).json({error: 'Validation failed'});\n  }\n});\n"})}),"\n",(0,r.jsx)(i.h2,{id:"platform-specific-features",children:"Platform-Specific Features"}),"\n",(0,r.jsx)(i.h3,{id:"ios-subscription-features",children:"iOS Subscription Features"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Introductory offers"}),"\n",(0,r.jsx)(i.li,{children:"Promotional offers"}),"\n",(0,r.jsx)(i.li,{children:"Family sharing"}),"\n",(0,r.jsx)(i.li,{children:"Subscription status API (iOS 15.0+)"}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"android-subscription-features",children:"Android Subscription Features"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Multiple subscription offers"}),"\n",(0,r.jsx)(i.li,{children:"Base plans and offers"}),"\n",(0,r.jsx)(i.li,{children:"Grace period handling"}),"\n",(0,r.jsx)(i.li,{children:"Upgrade/downgrade proration"}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(i.ol,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Always validate receipts server-side"})," - Never trust client-side validation alone"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Handle grace periods"})," - Continue providing access during payment retry periods"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Implement restore purchases"})," - Essential for users switching devices"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Check subscription status on app launch"})," - Ensure access is current"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Use activeSubscriptions helper"})," - Simplifies status checking across platforms"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Test thoroughly"})," - Use sandbox/test accounts on both platforms"]}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"common-subscription-scenarios",children:"Common Subscription Scenarios"}),"\n",(0,r.jsx)(i.h3,{id:"check-if-user-has-any-active-subscription",children:"Check if User Has Any Active Subscription"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-tsx",children:"const hasAnyActiveSubscription = activeSubscriptions.length > 0;\n"})}),"\n",(0,r.jsx)(i.h3,{id:"check-for-specific-subscription-tier",children:"Check for Specific Subscription Tier"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-tsx",children:"const hasPremium = activeSubscriptions.some(\n  (sub) => sub.productId === 'com.app.premium_yearly' && sub.isActive,\n);\n"})}),"\n",(0,r.jsx)(i.h3,{id:"display-subscription-expiration",children:"Display Subscription Expiration"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-tsx",children:"{\n  activeSubscriptions.map((sub) => (\n    <View key={sub.productId}>\n      <Text>Subscription: {sub.productId}</Text>\n      {sub.expirationDateIOS && (\n        <Text>\n          Expires: {new Date(sub.expirationDateIOS).toLocaleDateString()}\n        </Text>\n      )}\n      {Platform.OS === 'android' && (\n        <Text>Auto-renewing: {sub.autoRenewingAndroid ? 'Yes' : 'No'}</Text>\n      )}\n    </View>\n  ));\n}\n"})}),"\n",(0,r.jsx)(i.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,r.jsx)(i.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,r.jsxs)(i.ol,{children:["\n",(0,r.jsxs)(i.li,{children:["\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.strong,{children:"Subscription not showing as active"})}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["Check if ",(0,r.jsx)(i.code,{children:"finishTransaction"})," was called"]}),"\n",(0,r.jsx)(i.li,{children:"Verify server-side validation is working"}),"\n",(0,r.jsx)(i.li,{children:"Ensure subscription IDs match store configuration"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:["\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.strong,{children:"Can't purchase subscription"})}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Verify subscription is approved in store console"}),"\n",(0,r.jsx)(i.li,{children:"Check if user already has active subscription"}),"\n",(0,r.jsx)(i.li,{children:"Ensure test accounts are properly configured"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:["\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.strong,{children:"Restoration not working"})}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["Call ",(0,r.jsx)(i.code,{children:"getAvailablePurchases()"})," for restoration"]}),"\n",(0,r.jsx)(i.li,{children:"Validate restored purchases server-side"}),"\n",(0,r.jsx)(i.li,{children:"Handle platform-specific restoration flows"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"see-also",children:"See Also"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.a,{href:"https://github.com/hyochan/react-native-iap/tree/main/example/screens/SubscriptionFlow.tsx",children:"SubscriptionFlow.tsx"})," - Complete working example"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.a,{href:"../guides/lifecycle",children:"Purchase Lifecycle"})," - Understanding the purchase flow"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.a,{href:"../getting-started/setup-ios",children:"iOS Setup"})," - App Store subscription configuration"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.a,{href:"../getting-started/setup-android",children:"Android Setup"})," - Google Play subscription configuration"]}),"\n"]})]})}function u(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>c,x:()=>a});var s=n(6540);const r={},t=s.createContext(r);function c(e){const i=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(t.Provider,{value:i},e.children)}}}]);