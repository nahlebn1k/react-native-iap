"use strict";(self.webpackChunkreact_native_iap_docs=self.webpackChunkreact_native_iap_docs||[]).push([[6106],{571:(e,n,r)=>{r.d(n,{A:()=>o});var s=r(6540),i=r(4848);function t({className:e="adfit",style:n,unit:r,height:t,width:o}){return(0,s.useEffect)(()=>{const n=setTimeout(()=>{const n=document.querySelector(`.${e}`);if(!n)return void console.warn(`AdFit: Element with class "${e}" not found`);const s=n.querySelectorAll(".kakao_ad_area"),i=n.querySelectorAll('script[src*="kas/static/ba.min.js"]');s.forEach(e=>e.remove()),i.forEach(e=>e.remove());const c=document.createElement("ins"),a=document.createElement("script");c.className="kakao_ad_area",c.style.cssText="display:none; width:100%;",a.async=!0,a.type="text/javascript",a.src="//t1.daumcdn.net/kas/static/ba.min.js",c.setAttribute("data-ad-width",o.toString()),c.setAttribute("data-ad-height",t.toString()),c.setAttribute("data-ad-unit",r),n.appendChild(c),n.appendChild(a)},100);return()=>clearTimeout(n)},[e,r,t,o]),(0,i.jsx)("div",{style:n,children:(0,i.jsx)("div",{className:e})})}function o(){return(0,i.jsx)(t,{unit:"DAN-YTmjDwlbcP42HBg6",height:100,width:320,className:"adfit-top",style:{flex:1,marginTop:24,marginBottom:24}})}},7460:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>c,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"api/methods/core-methods","title":"Core Methods","description":"This section covers the core methods available in react-native-iap for managing in-app purchases.","source":"@site/versioned_docs/version-14.2/api/methods/core-methods.md","sourceDirName":"api/methods","slug":"/api/methods/core-methods","permalink":"/react-native-iap/docs/14.2/api/methods/core-methods","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/react-native-iap/tree/main/docs/versioned_docs/version-14.2/api/methods/core-methods.md","tags":[],"version":"14.2","sidebarPosition":1,"frontMatter":{"title":"Core Methods","sidebar_label":"Core Methods","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Types","permalink":"/react-native-iap/docs/14.2/api/types"},"next":{"title":"Listeners","permalink":"/react-native-iap/docs/14.2/api/methods/listeners"}}');var i=r(4848),t=r(8453),o=r(571);const c={title:"Core Methods",sidebar_label:"Core Methods",sidebar_position:1},a="Core Methods",l={},d=[{value:"\ud83d\udea8 Important Platform Differences",id:"-important-platform-differences",level:2},{value:"Key Differences",id:"key-differences",level:3},{value:"Core Connection Methods",id:"core-connection-methods",level:2},{value:"initConnection()",id:"initconnection",level:3},{value:"endConnection()",id:"endconnection",level:3},{value:"Product Management",id:"product-management",level:2},{value:"fetchProducts()",id:"fetchproducts",level:3},{value:"Purchase Methods",id:"purchase-methods",level:2},{value:"requestPurchase()",id:"requestpurchase",level:3},{value:"Platform-Specific API (v14.0+) - Recommended",id:"platform-specific-api-v140---recommended",level:4},{value:"getAvailablePurchases()",id:"getavailablepurchases",level:3},{value:"finishTransaction()",id:"finishtransaction",level:3},{value:"Event Listeners",id:"event-listeners",level:2},{value:"purchaseUpdatedListener()",id:"purchaseupdatedlistener",level:3},{value:"purchaseErrorListener()",id:"purchaseerrorlistener",level:3},{value:"Receipt Validation",id:"receipt-validation",level:2},{value:"validateReceipt()",id:"validatereceipt",level:3},{value:"Subscription Helpers",id:"subscription-helpers",level:2},{value:"getActiveSubscriptions()",id:"getactivesubscriptions",level:3},{value:"hasActiveSubscriptions()",id:"hasactivesubscriptions",level:3},{value:"Android-Specific Methods",id:"android-specific-methods",level:2},{value:"acknowledgePurchaseAndroid()",id:"acknowledgepurchaseandroid",level:3},{value:"consumePurchaseAndroid()",id:"consumepurchaseandroid",level:3},{value:"iOS-Specific Methods",id:"ios-specific-methods",level:2},{value:"promotedProductListenerIOS()",id:"promotedproductlistenerios",level:3},{value:"syncIOS()",id:"syncios",level:3},{value:"requestPromotedProductIOS()",id:"requestpromotedproductios",level:3},{value:"presentCodeRedemptionSheetIOS()",id:"presentcoderedemptionsheetios",level:3},{value:"buyPromotedProductIOS()",id:"buypromotedproductios",level:3},{value:"clearTransactionIOS()",id:"cleartransactionios",level:3},{value:"beginRefundRequestIOS()",id:"beginrefundrequestios",level:3},{value:"subscriptionStatusIOS()",id:"subscriptionstatusios",level:3},{value:"currentEntitlementIOS()",id:"currententitlementios",level:3},{value:"latestTransactionIOS()",id:"latesttransactionios",level:3},{value:"getPendingTransactionsIOS()",id:"getpendingtransactionsios",level:3},{value:"showManageSubscriptionsIOS()",id:"showmanagesubscriptionsios",level:3},{value:"isEligibleForIntroOfferIOS()",id:"iseligibleforintroofferios",level:3},{value:"getReceiptDataIOS()",id:"getreceiptdataios",level:3},{value:"isTransactionVerifiedIOS()",id:"istransactionverifiedios",level:3},{value:"getTransactionJwsIOS()",id:"gettransactionjwsios",level:3},{value:"getStorefrontIOS()",id:"getstorefrontios",level:3},{value:"getAppTransactionIOS()",id:"getapptransactionios",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"See Also",id:"see-also",level:2}];function h(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"core-methods",children:"Core Methods"})}),"\n",(0,i.jsx)(o.A,{}),"\n",(0,i.jsx)(n.p,{children:"This section covers the core methods available in react-native-iap for managing in-app purchases."}),"\n",(0,i.jsx)(n.h2,{id:"-important-platform-differences",children:"\ud83d\udea8 Important Platform Differences"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Critical for Cross-Platform Development:"})," iOS and Android have fundamental differences in their purchase APIs."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"key-differences",children:"Key Differences"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"iOS"}),": Can only purchase ",(0,i.jsx)(n.strong,{children:"one product at a time"})," (single SKU)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Android"}),": Can purchase ",(0,i.jsx)(n.strong,{children:"multiple products at once"})," (array of SKUs)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This difference exists because:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"iOS App Store processes purchases individually"}),"\n",(0,i.jsx)(n.li,{children:"Google Play Store supports batch purchases"}),"\n"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Method"}),(0,i.jsx)(n.th,{children:"iOS"}),(0,i.jsx)(n.th,{children:"Android"}),(0,i.jsx)(n.th,{children:"Cross-Platform Solution"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"requestPurchase()"})}),(0,i.jsxs)(n.td,{children:["Uses ",(0,i.jsx)(n.code,{children:"sku: string"})]}),(0,i.jsxs)(n.td,{children:["Uses ",(0,i.jsx)(n.code,{children:"skus: string[]"})]}),(0,i.jsx)(n.td,{children:"Platform-specific handling required"})]})})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"\ud83d\udca1 Best Practice:"})," Use the new platform-specific API (v14.0+) to avoid platform checks:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"// New API - no Platform.OS checks needed!\nawait requestPurchase({\n  request: {\n    ios: {sku: productId},\n    android: {skus: [productId]},\n  },\n  type: 'in-app',\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"\ud83c\udfaf Recommended Approach:"})," For the best developer experience, use the ",(0,i.jsxs)(n.a,{href:"/docs/api/use-iap",children:[(0,i.jsx)(n.code,{children:"useIAP"})," hook"]})," which handles platform differences automatically and provides a cleaner callback-based API."]}),"\n",(0,i.jsx)(n.h2,{id:"core-connection-methods",children:"Core Connection Methods"}),"\n",(0,i.jsx)(n.h3,{id:"initconnection",children:"initConnection()"}),"\n",(0,i.jsx)(n.p,{children:"Initializes the connection to the store. This method must be called before any other store operations."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {initConnection} from 'react-native-iap';\n\nconst initialize = async () => {\n  try {\n    const result = await initConnection();\n    console.log('Store connection initialized:', result);\n  } catch (error) {\n    console.error('Failed to initialize connection:', error);\n  }\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"Promise<boolean>"})," \u2014 True if connection was successful"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note:"})," When using the ",(0,i.jsx)(n.code,{children:"useIAP"})," hook, connection is automatically managed."]}),"\n",(0,i.jsx)(n.h3,{id:"endconnection",children:"endConnection()"}),"\n",(0,i.jsx)(n.p,{children:"Ends the connection to the store and cleans up resources."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {endConnection} from 'react-native-iap';\n\nconst cleanup = async () => {\n  try {\n    const result = await endConnection();\n    console.log('Store connection ended:', result);\n  } catch (error) {\n    console.error('Failed to end connection:', error);\n  }\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"Promise<Purchase[]>"})," \u2014 Array of subscriptions whose auto-renewal status changed"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note:"})," When using the ",(0,i.jsx)(n.code,{children:"useIAP"})," hook, connection cleanup is automatic."]}),"\n",(0,i.jsx)(n.h2,{id:"product-management",children:"Product Management"}),"\n",(0,i.jsx)(n.h3,{id:"fetchproducts",children:"fetchProducts()"}),"\n",(0,i.jsx)(n.p,{children:"Fetches product or subscription information from the store."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {fetchProducts} from 'react-native-iap';\n\n// Fetch in-app products\nconst loadProducts = async () => {\n  try {\n    const products = await fetchProducts({\n      skus: ['com.example.product1', 'com.example.product2'],\n      type: 'in-app',\n    });\n\n    console.log('Products:', products);\n    return products;\n  } catch (error) {\n    console.error('Failed to fetch products:', error);\n  }\n};\n\n// Fetch subscriptions\nconst loadSubscriptions = async () => {\n  try {\n    const subscriptions = await fetchProducts({\n      skus: ['com.example.premium_monthly', 'com.example.premium_yearly'],\n      type: 'subs',\n    });\n\n    console.log('Subscriptions:', subscriptions);\n    return subscriptions;\n  } catch (error) {\n    console.error('Failed to fetch subscriptions:', error);\n  }\n};\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"params"})," (object):","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"skus"})," (string[]): Array of product or subscription IDs to fetch"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"type"})," ('in-app' | 'subs' | 'all'): Product type \u2014 'in-app' (default), 'subs', or 'all' to fetch both"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"Promise<Product[]>"})]}),"\n",(0,i.jsx)(n.h2,{id:"purchase-methods",children:"Purchase Methods"}),"\n",(0,i.jsx)(n.h3,{id:"requestpurchase",children:"requestPurchase()"}),"\n",(0,i.jsx)(n.p,{children:"Initiates a purchase request for products or subscriptions."}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"\u26a0\ufe0f Important:"})," This is an event-based operation. Listen for events through ",(0,i.jsx)(n.code,{children:"purchaseUpdatedListener"})," or ",(0,i.jsx)(n.code,{children:"purchaseErrorListener"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"\u26a0\ufe0f Platform Differences:"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"iOS"}),": Can only purchase one product at a time (uses ",(0,i.jsx)(n.code,{children:"sku: string"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Android"}),": Can purchase multiple products at once (uses ",(0,i.jsx)(n.code,{children:"skus: string[]"}),")"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"platform-specific-api-v140---recommended",children:"Platform-Specific API (v14.0+) - Recommended"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {requestPurchase} from 'react-native-iap';\n\n// Product purchase\nconst buyProduct = async (productId: string) => {\n  try {\n    await requestPurchase({\n      request: {\n        ios: {\n          sku: productId,\n          quantity: 1,\n        },\n        android: {\n          skus: [productId],\n        },\n      },\n      type: 'in-app',\n    });\n  } catch (error) {\n    console.error('Purchase failed:', error);\n  }\n};\n\n// Subscription purchase\nconst buySubscription = async (subscriptionId: string, subscription?: any) => {\n  try {\n    await requestPurchase({\n      request: {\n        ios: {\n          sku: subscriptionId,\n          appAccountToken: 'user-123',\n        },\n        android: {\n          skus: [subscriptionId],\n          subscriptionOffers:\n            subscription?.subscriptionOfferDetails?.map((offer) => ({\n              sku: subscriptionId,\n              offerToken: offer.offerToken,\n            })) || [],\n        },\n      },\n      type: 'subs',\n    });\n  } catch (error) {\n    console.error('Subscription failed:', error);\n  }\n};\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"params"})," (object):","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"request"})," (object): Purchase request configuration","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"iOS"}),": ",(0,i.jsx)(n.code,{children:"sku"})," (string) - Product ID to purchase"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Android"}),": ",(0,i.jsx)(n.code,{children:"skus"})," (string[]) - Array of product IDs to purchase"]}),"\n",(0,i.jsx)(n.li,{children:"Additional platform-specific options available"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"type?"})," ('in-app' | 'subs'): Purchase type, defaults to 'in-app'"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"Promise<void>"})," - Purchase result is delivered through listeners"]}),"\n",(0,i.jsx)(n.h3,{id:"getavailablepurchases",children:"getAvailablePurchases()"}),"\n",(0,i.jsx)(n.p,{children:"Retrieves available purchases for restoration (non-consumable products and subscriptions)."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {getAvailablePurchases} from 'react-native-iap';\n\nconst restorePurchases = async () => {\n  try {\n    const purchases = await getAvailablePurchases({\n      onlyIncludeActiveItemsIOS: true,\n    });\n\n    for (const purchase of purchases) {\n      // Validate and restore each purchase\n      const isValid = await validateReceiptOnServer(purchase);\n      if (isValid) {\n        await grantPurchaseToUser(purchase);\n      }\n    }\n\n    console.log('Purchases restored');\n  } catch (error) {\n    console.error('Failed to restore purchases:', error);\n  }\n};\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"options?"})," (object):","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"alsoPublishToEventListenerIOS?"})," (boolean): Whether to also publish to event listener (iOS only)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"onlyIncludeActiveItemsIOS?"})," (boolean): Whether to only include active items (iOS only)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"Promise<Purchase[]>"})]}),"\n",(0,i.jsx)(n.h3,{id:"finishtransaction",children:"finishTransaction()"}),"\n",(0,i.jsx)(n.p,{children:"Completes a purchase transaction. Must be called after successful receipt validation."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {finishTransaction} from 'react-native-iap';\n\nconst completePurchase = async (purchase) => {\n  try {\n    // Validate receipt on your server first\n    const isValid = await validateReceiptOnServer(purchase);\n\n    if (isValid) {\n      // Grant purchase to user\n      await grantPurchaseToUser(purchase);\n\n      // Finish the transaction\n      await finishTransaction({\n        purchase,\n        isConsumable: true, // Set to true for consumable products\n      });\n\n      console.log('Transaction completed');\n    }\n  } catch (error) {\n    console.error('Failed to finish transaction:', error);\n  }\n};\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"params"})," (object):","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"purchase"})," (Purchase): The purchase object to finish"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"isConsumable?"})," (boolean): Whether the product is consumable (Android only)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"Promise<PurchaseResult | boolean>"})]}),"\n",(0,i.jsx)(n.h2,{id:"event-listeners",children:"Event Listeners"}),"\n",(0,i.jsx)(n.h3,{id:"purchaseupdatedlistener",children:"purchaseUpdatedListener()"}),"\n",(0,i.jsx)(n.p,{children:"Fired when a purchase is successful or when a pending purchase is completed."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {purchaseUpdatedListener} from 'react-native-iap';\n\nconst subscription = purchaseUpdatedListener((purchase) => {\n  console.log('Purchase successful:', purchase);\n  // 1. Validate receipt with backend\n  // 2. Deliver content to user\n  // 3. Call finishTransaction to acknowledge\n});\n\n// Later, clean up\nsubscription.remove();\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"EventSubscription"})," object with ",(0,i.jsx)(n.code,{children:"remove()"})," method"]}),"\n",(0,i.jsx)(n.h3,{id:"purchaseerrorlistener",children:"purchaseErrorListener()"}),"\n",(0,i.jsx)(n.p,{children:"Fired when a purchase fails or is cancelled by the user."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {purchaseErrorListener} from 'react-native-iap';\n\nconst subscription = purchaseErrorListener((error) => {\n  switch (error.code) {\n    case 'E_USER_CANCELLED':\n      // User cancelled - no action needed\n      break;\n    case 'E_ITEM_UNAVAILABLE':\n      // Product not available\n      break;\n    case 'E_NETWORK_ERROR':\n      // Retry with backoff\n      break;\n  }\n});\n\n// Later, clean up\nsubscription.remove();\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"EventSubscription"})," object with ",(0,i.jsx)(n.code,{children:"remove()"})," method"]}),"\n",(0,i.jsx)(n.h2,{id:"receipt-validation",children:"Receipt Validation"}),"\n",(0,i.jsx)(n.h3,{id:"validatereceipt",children:"validateReceipt()"}),"\n",(0,i.jsx)(n.p,{children:"Validates receipt on both iOS and Android platforms."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {validateReceipt, Platform} from 'react-native-iap';\n\nconst validatePurchase = async (productId: string, purchase: any) => {\n  try {\n    if (Platform.OS === 'ios') {\n      // iOS: Simple validation with just product ID\n      const result = await validateReceipt(productId);\n      return result;\n    } else if (Platform.OS === 'android') {\n      // Android: Requires additional parameters\n      const result = await validateReceipt(productId, {\n        packageName: purchase.packageNameAndroid,\n        productToken: purchase.purchaseToken,\n        isSub: false, // Set to true for subscriptions\n      });\n      return result;\n    }\n  } catch (error) {\n    console.error('Validation failed:', error);\n    throw error;\n  }\n};\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"sku"})," (string): Product SKU"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"androidOptions?"})," (object): Android-specific validation options (required for Android)","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"packageName"})," (string): Package name of your app"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"productToken"})," (string): Purchase token from the purchase"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"accessToken"})," (string): Optional access token for server validation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"isSub?"})," (boolean): Whether this is a subscription"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"Promise<ReceiptValidationResultIOS | ReceiptValidationResultAndroid>"})]}),"\n",(0,i.jsx)(n.h2,{id:"subscription-helpers",children:"Subscription Helpers"}),"\n",(0,i.jsx)(n.h3,{id:"getactivesubscriptions",children:"getActiveSubscriptions()"}),"\n",(0,i.jsx)(n.p,{children:"Retrieves all active subscriptions with detailed status information."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {getActiveSubscriptions} from 'react-native-iap';\n\nconst checkSubscriptions = async () => {\n  try {\n    // Get all active subscriptions\n    const allActiveSubscriptions = await getActiveSubscriptions();\n\n    // Or filter by specific subscription IDs\n    const specificSubscriptions = await getActiveSubscriptions([\n      'premium_monthly',\n      'premium_yearly',\n    ]);\n\n    for (const subscription of allActiveSubscriptions) {\n      console.log('Product ID:', subscription.productId);\n      console.log('Is Active:', subscription.isActive);\n      console.log('Will expire soon:', subscription.willExpireSoon);\n    }\n  } catch (error) {\n    console.error('Failed to get active subscriptions:', error);\n  }\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"Promise<ActiveSubscription[]>"})]}),"\n",(0,i.jsx)(n.h3,{id:"hasactivesubscriptions",children:"hasActiveSubscriptions()"}),"\n",(0,i.jsx)(n.p,{children:"Checks if the user has any active subscriptions."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {hasActiveSubscriptions} from 'react-native-iap';\n\nconst checkIfUserHasSubscription = async () => {\n  try {\n    // Check if user has any active subscriptions\n    const hasAny = await hasActiveSubscriptions();\n\n    // Or check for specific subscriptions\n    const hasPremium = await hasActiveSubscriptions([\n      'premium_monthly',\n      'premium_yearly',\n    ]);\n\n    if (hasPremium) {\n      console.log('User has premium subscription');\n    }\n  } catch (error) {\n    console.error('Failed to check subscription status:', error);\n  }\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"Promise<boolean>"})]}),"\n",(0,i.jsx)(n.h2,{id:"android-specific-methods",children:"Android-Specific Methods"}),"\n",(0,i.jsx)(n.h3,{id:"acknowledgepurchaseandroid",children:"acknowledgePurchaseAndroid()"}),"\n",(0,i.jsx)(n.p,{children:"Acknowledges a purchase on Android (required for non-consumable products)."}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note:"})," This is called automatically by ",(0,i.jsx)(n.a,{href:"#finishtransaction",children:(0,i.jsx)(n.code,{children:"finishTransaction()"})})," when ",(0,i.jsx)(n.code,{children:"isConsumable"})," is ",(0,i.jsx)(n.code,{children:"false"}),". You typically don't need to call this directly."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {acknowledgePurchaseAndroid} from 'react-native-iap';\n\nconst acknowledgePurchase = async (purchaseToken: string) => {\n  try {\n    const result = await acknowledgePurchaseAndroid(purchaseToken);\n    console.log('Purchase acknowledged:', result);\n  } catch (error) {\n    console.error('Failed to acknowledge purchase:', error);\n  }\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Platform:"})," Android only"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"Promise<PurchaseResult>"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"See Also:"})," ",(0,i.jsx)(n.a,{href:"#finishtransaction",children:(0,i.jsx)(n.code,{children:"finishTransaction()"})})," - Recommended way to complete purchases"]}),"\n",(0,i.jsx)(n.h3,{id:"consumepurchaseandroid",children:"consumePurchaseAndroid()"}),"\n",(0,i.jsx)(n.p,{children:"Consumes a purchase on Android (required for consumable products)."}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note:"})," This is called automatically by ",(0,i.jsx)(n.a,{href:"#finishtransaction",children:(0,i.jsx)(n.code,{children:"finishTransaction()"})})," when ",(0,i.jsx)(n.code,{children:"isConsumable"})," is ",(0,i.jsx)(n.code,{children:"true"}),". You typically don't need to call this directly."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {consumePurchaseAndroid} from 'react-native-iap';\n\nconst consumePurchase = async (purchaseToken: string) => {\n  try {\n    const result = await consumePurchaseAndroid(purchaseToken);\n    console.log('Purchase consumed:', result);\n  } catch (error) {\n    console.error('Failed to consume purchase:', error);\n  }\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Platform:"})," Android only"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"Promise<PurchaseResult>"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"See Also:"})," ",(0,i.jsx)(n.a,{href:"#finishtransaction",children:(0,i.jsx)(n.code,{children:"finishTransaction()"})})," - Recommended way to complete purchases"]}),"\n",(0,i.jsx)(n.h2,{id:"ios-specific-methods",children:"iOS-Specific Methods"}),"\n",(0,i.jsx)(n.h3,{id:"promotedproductlistenerios",children:"promotedProductListenerIOS()"}),"\n",(0,i.jsx)(n.p,{children:"Listener for App Store promoted product events."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {promotedProductListenerIOS} from 'react-native-iap';\n\nconst subscription = promotedProductListenerIOS((product) => {\n  console.log('Promoted product:', product);\n  // Trigger purchase flow for the promoted product\n});\n\n// Later, clean up\nsubscription.remove();\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Platform:"})," iOS only"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"EventSubscription"})," object with ",(0,i.jsx)(n.code,{children:"remove()"})," method"]}),"\n",(0,i.jsx)(n.h3,{id:"syncios",children:"syncIOS()"}),"\n",(0,i.jsx)(n.p,{children:"Syncs iOS purchases with App Store."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {syncIOS} from 'react-native-iap';\n\nconst syncPurchases = async () => {\n  try {\n    const result = await syncIOS();\n    console.log('Sync successful:', result);\n  } catch (error) {\n    console.error('Failed to sync:', error);\n  }\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Platform:"})," iOS only"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"Promise<boolean>"})]}),"\n",(0,i.jsx)(n.h3,{id:"requestpromotedproductios",children:"requestPromotedProductIOS()"}),"\n",(0,i.jsx)(n.p,{children:"Requests the promoted product from the App Store."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {requestPromotedProductIOS} from 'react-native-iap';\n\nconst getPromotedProduct = async () => {\n  try {\n    const product = await requestPromotedProductIOS();\n    if (product) {\n      console.log('Promoted product:', product);\n    }\n  } catch (error) {\n    console.error('Failed to get promoted product:', error);\n  }\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Platform:"})," iOS only"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"Promise<Product | null>"})]}),"\n",(0,i.jsx)(n.h3,{id:"presentcoderedemptionsheetios",children:"presentCodeRedemptionSheetIOS()"}),"\n",(0,i.jsx)(n.p,{children:"Presents the code redemption sheet for offer codes."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {presentCodeRedemptionSheetIOS} from 'react-native-iap';\n\nconst showRedemptionSheet = async () => {\n  try {\n    const result = await presentCodeRedemptionSheetIOS();\n    console.log('Sheet presented:', result);\n  } catch (error) {\n    console.error('Failed to present sheet:', error);\n  }\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Platform:"})," iOS only"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"Promise<boolean>"})]}),"\n",(0,i.jsx)(n.h3,{id:"buypromotedproductios",children:"buyPromotedProductIOS()"}),"\n",(0,i.jsx)(n.p,{children:"Completes the purchase of a promoted product."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {buyPromotedProductIOS} from 'react-native-iap';\n\nconst purchasePromotedProduct = async () => {\n  try {\n    await buyPromotedProductIOS();\n    console.log('Promoted product purchased');\n  } catch (error) {\n    console.error('Failed to purchase promoted product:', error);\n  }\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Platform:"})," iOS only"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"Promise<void>"})]}),"\n",(0,i.jsx)(n.h3,{id:"cleartransactionios",children:"clearTransactionIOS()"}),"\n",(0,i.jsx)(n.p,{children:"Clears unfinished transactions."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {clearTransactionIOS} from 'react-native-iap';\n\nconst clearTransactions = async () => {\n  try {\n    await clearTransactionIOS();\n    console.log('Transactions cleared');\n  } catch (error) {\n    console.error('Failed to clear transactions:', error);\n  }\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Platform:"})," iOS only"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"Promise<void>"})]}),"\n",(0,i.jsx)(n.h3,{id:"beginrefundrequestios",children:"beginRefundRequestIOS()"}),"\n",(0,i.jsx)(n.p,{children:"Begins a refund request for a product (iOS 15+)."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {beginRefundRequestIOS} from 'react-native-iap';\n\nconst requestRefund = async (sku: string) => {\n  try {\n    const status = await beginRefundRequestIOS(sku);\n    console.log('Refund status:', status);\n  } catch (error) {\n    console.error('Failed to begin refund:', error);\n  }\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Platform:"})," iOS 15+ only"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"Promise<string | null>"})]}),"\n",(0,i.jsx)(n.h3,{id:"subscriptionstatusios",children:"subscriptionStatusIOS()"}),"\n",(0,i.jsx)(n.p,{children:"Gets subscription status for a product."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {subscriptionStatusIOS} from 'react-native-iap';\n\nconst getSubscriptionStatus = async (sku: string) => {\n  try {\n    const statuses = await subscriptionStatusIOS(sku);\n    console.log('Subscription statuses:', statuses);\n  } catch (error) {\n    console.error('Failed to get status:', error);\n  }\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Platform:"})," iOS only"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"Promise<SubscriptionStatusIOS[]>"})]}),"\n",(0,i.jsx)(n.h3,{id:"currententitlementios",children:"currentEntitlementIOS()"}),"\n",(0,i.jsx)(n.p,{children:"Gets current entitlement for a product."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {currentEntitlementIOS} from 'react-native-iap';\n\nconst getEntitlement = async (sku: string) => {\n  try {\n    const entitlement = await currentEntitlementIOS(sku);\n    if (entitlement) {\n      console.log('Current entitlement:', entitlement);\n    }\n  } catch (error) {\n    console.error('Failed to get entitlement:', error);\n  }\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Platform:"})," iOS only"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"Promise<Purchase | null>"})]}),"\n",(0,i.jsx)(n.h3,{id:"latesttransactionios",children:"latestTransactionIOS()"}),"\n",(0,i.jsx)(n.p,{children:"Gets latest transaction for a product."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {latestTransactionIOS} from 'react-native-iap';\n\nconst getLatestTransaction = async (sku: string) => {\n  try {\n    const transaction = await latestTransactionIOS(sku);\n    if (transaction) {\n      console.log('Latest transaction:', transaction);\n    }\n  } catch (error) {\n    console.error('Failed to get transaction:', error);\n  }\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Platform:"})," iOS only"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"Promise<Purchase | null>"})]}),"\n",(0,i.jsx)(n.h3,{id:"getpendingtransactionsios",children:"getPendingTransactionsIOS()"}),"\n",(0,i.jsx)(n.p,{children:"Gets all pending transactions."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {getPendingTransactionsIOS} from 'react-native-iap';\n\nconst getPendingTransactions = async () => {\n  try {\n    const transactions = await getPendingTransactionsIOS();\n    console.log('Pending transactions:', transactions);\n  } catch (error) {\n    console.error('Failed to get pending transactions:', error);\n  }\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Platform:"})," iOS only"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"Promise<Purchase[]>"})]}),"\n",(0,i.jsx)(n.h3,{id:"showmanagesubscriptionsios",children:"showManageSubscriptionsIOS()"}),"\n",(0,i.jsx)(n.p,{children:"Shows the manage subscriptions screen."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {showManageSubscriptionsIOS} from 'react-native-iap';\n\nconst showManageSubscriptions = async () => {\n  try {\n    const result = await showManageSubscriptionsIOS();\n    console.log('Manage subscriptions shown:', result);\n  } catch (error) {\n    console.error('Failed to show manage subscriptions:', error);\n  }\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Platform:"})," iOS only"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"Promise<boolean>"})]}),"\n",(0,i.jsx)(n.h3,{id:"iseligibleforintroofferios",children:"isEligibleForIntroOfferIOS()"}),"\n",(0,i.jsx)(n.p,{children:"Checks if user is eligible for intro offer."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {isEligibleForIntroOfferIOS} from 'react-native-iap';\n\nconst checkEligibility = async (groupID: string) => {\n  try {\n    const isEligible = await isEligibleForIntroOfferIOS(groupID);\n    console.log('Eligible for intro offer:', isEligible);\n  } catch (error) {\n    console.error('Failed to check eligibility:', error);\n  }\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Platform:"})," iOS only"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"Promise<boolean>"})]}),"\n",(0,i.jsx)(n.h3,{id:"getreceiptdataios",children:"getReceiptDataIOS()"}),"\n",(0,i.jsx)(n.p,{children:"Gets receipt data."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {getReceiptDataIOS} from 'react-native-iap';\n\nconst getReceiptData = async () => {\n  try {\n    const receiptData = await getReceiptDataIOS();\n    console.log('Receipt data:', receiptData);\n  } catch (error) {\n    console.error('Failed to get receipt data:', error);\n  }\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Platform:"})," iOS only"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"Promise<string>"})," - Base64 encoded receipt data"]}),"\n",(0,i.jsx)(n.h3,{id:"istransactionverifiedios",children:"isTransactionVerifiedIOS()"}),"\n",(0,i.jsx)(n.p,{children:"Checks if a transaction is verified."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {isTransactionVerifiedIOS} from 'react-native-iap';\n\nconst checkVerification = async (sku: string) => {\n  try {\n    const isVerified = await isTransactionVerifiedIOS(sku);\n    console.log('Transaction verified:', isVerified);\n  } catch (error) {\n    console.error('Failed to check verification:', error);\n  }\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Platform:"})," iOS only"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"Promise<boolean>"})]}),"\n",(0,i.jsx)(n.h3,{id:"gettransactionjwsios",children:"getTransactionJwsIOS()"}),"\n",(0,i.jsx)(n.p,{children:"Gets transaction JWS representation."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {getTransactionJwsIOS} from 'react-native-iap';\n\nconst getTransactionJws = async (sku: string) => {\n  try {\n    const jws = await getTransactionJwsIOS(sku);\n    if (jws) {\n      console.log('Transaction JWS:', jws);\n    }\n  } catch (error) {\n    console.error('Failed to get JWS:', error);\n  }\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Platform:"})," iOS only"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"Promise<string | null>"})]}),"\n",(0,i.jsx)(n.h3,{id:"getstorefrontios",children:"getStorefrontIOS()"}),"\n",(0,i.jsx)(n.p,{children:"Gets the storefront identifier for the user's App Store account."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {getStorefrontIOS} from 'react-native-iap';\n\nconst getStorefront = async () => {\n  try {\n    const storefront = await getStorefrontIOS();\n    console.log('User storefront:', storefront); // e.g., 'USA', 'GBR', 'KOR'\n  } catch (error) {\n    console.error('Failed to get storefront:', error);\n  }\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Platform:"})," iOS only"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"Promise<string>"})," - The storefront identifier"]}),"\n",(0,i.jsx)(n.h3,{id:"getapptransactionios",children:"getAppTransactionIOS()"}),"\n",(0,i.jsx)(n.p,{children:"Gets the original app transaction ID if the app was purchased from the App Store."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {getAppTransactionIOS} from 'react-native-iap';\n\nconst getAppTransaction = async () => {\n  try {\n    const appTransaction = await getAppTransactionIOS();\n    if (appTransaction) {\n      console.log('App was purchased, transaction ID:', appTransaction);\n    } else {\n      console.log('App was not purchased from App Store');\n    }\n  } catch (error) {\n    console.error('Failed to get app transaction:', error);\n  }\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Platform:"})," iOS only"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"Promise<string | null>"})," - The original app transaction ID or null"]}),"\n",(0,i.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsx)(n.p,{children:"All methods can throw errors that should be handled appropriately:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {PurchaseError} from 'react-native-iap';\n\ntry {\n  await requestPurchase({\n    request: {\n      ios: {sku: 'product_id'},\n      android: {skus: ['product_id']},\n    },\n  });\n} catch (error) {\n  if (error instanceof PurchaseError) {\n    switch (error.code) {\n      case 'E_USER_CANCELLED':\n        console.log('User cancelled purchase');\n        break;\n      case 'E_NETWORK_ERROR':\n        console.log('Network error, please try again');\n        break;\n      default:\n        console.error('Purchase failed:', error.message);\n    }\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["For a complete list of error codes, see the ",(0,i.jsx)(n.a,{href:"../error-codes",children:"Error Codes"})," documentation."]}),"\n",(0,i.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../use-iap",children:"useIAP Hook"})," - Recommended for React components"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../types",children:"Types Reference"})," - Complete type definitions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../error-codes",children:"Error Codes"})," - Error handling reference"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>c});var s=r(6540);const i={},t=s.createContext(i);function o(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);