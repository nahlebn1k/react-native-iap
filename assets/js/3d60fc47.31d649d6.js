"use strict";(self.webpackChunkreact_native_iap_docs=self.webpackChunkreact_native_iap_docs||[]).push([[2262],{571:(e,n,i)=>{i.d(n,{A:()=>o});var r=i(6540),s=i(4848);function t({className:e="adfit",style:n,unit:i,height:t,width:o}){return(0,r.useEffect)(()=>{const n=setTimeout(()=>{const n=document.querySelector(`.${e}`);if(!n)return void console.warn(`AdFit: Element with class "${e}" not found`);const r=n.querySelectorAll(".kakao_ad_area"),s=n.querySelectorAll('script[src*="kas/static/ba.min.js"]');r.forEach(e=>e.remove()),s.forEach(e=>e.remove());const l=document.createElement("ins"),a=document.createElement("script");l.className="kakao_ad_area",l.style.cssText="display:none; width:100%;",a.async=!0,a.type="text/javascript",a.src="//t1.daumcdn.net/kas/static/ba.min.js",l.setAttribute("data-ad-width",o.toString()),l.setAttribute("data-ad-height",t.toString()),l.setAttribute("data-ad-unit",i),n.appendChild(l),n.appendChild(a)},100);return()=>clearTimeout(n)},[e,i,t,o]),(0,s.jsx)("div",{style:n,children:(0,s.jsx)("div",{className:e})})}function o(){return(0,s.jsx)(t,{unit:"DAN-YTmjDwlbcP42HBg6",height:100,width:320,className:"adfit-top",style:{flex:1,marginTop:24,marginBottom:24}})}},1378:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"installation","title":"Installation","description":"This guide will help you install and configure React Native IAP in your React Native or Expo project.","source":"@site/versioned_docs/version-14.3/installation.md","sourceDirName":".","slug":"/installation","permalink":"/react-native-iap/docs/14.3/installation","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/react-native-iap/tree/main/docs/versioned_docs/version-14.3/installation.md","tags":[],"version":"14.3","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/react-native-iap/docs/14.3/intro"},"next":{"title":"iOS Setup","permalink":"/react-native-iap/docs/14.3/getting-started/setup-ios"}}');var s=i(4848),t=i(8453),o=i(571);const l={sidebar_position:2},a="Installation",c={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Package Installation",id:"package-installation",level:2},{value:"Important for Expo Managed Workflow",id:"important-for-expo-managed-workflow",level:3},{value:"Platform Configuration",id:"platform-configuration",level:2},{value:"For Expo Managed Workflow",id:"for-expo-managed-workflow",level:3},{value:"For React Native CLI Projects",id:"for-react-native-cli-projects",level:3},{value:"iOS",id:"ios",level:4},{value:"Android",id:"android",level:4},{value:"Quick Start",id:"quick-start",level:2},{value:"1. Basic Setup",id:"1-basic-setup",level:3},{value:"2. Fetch Products",id:"2-fetch-products",level:3},{value:"3. Display Products",id:"3-display-products",level:3},{value:"4. Handle Purchases",id:"4-handle-purchases",level:3},{value:"5. Complete Transactions",id:"5-complete-transactions",level:3},{value:"Complete Basic Example",id:"complete-basic-example",level:3},{value:"Store Configuration",id:"store-configuration",level:2},{value:"Verification",id:"verification",level:2},{value:"Next Steps",id:"next-steps",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2}];function p(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"installation",children:"Installation"})}),"\n",(0,s.jsx)(o.A,{}),"\n",(0,s.jsx)(n.p,{children:"This guide will help you install and configure React Native IAP in your React Native or Expo project."}),"\n",(0,s.jsxs)(n.admonition,{title:"Compatibility (Nitro 14.x)",type:"warning",children:[(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"react-native-iap@14.x"})," is Nitro-based and requires ",(0,s.jsx)(n.strong,{children:"React Native 0.79+"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["If you must stay on ",(0,s.jsx)(n.strong,{children:"RN 0.75.x or lower"}),", install the last pre\u2011Nitro version: ",(0,s.jsx)(n.code,{children:"npm i react-native-iap@13.1.0"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Hitting Swift 6 C++ interop errors in Nitro (e.g. ",(0,s.jsx)(n.code,{children:"AnyMap.swift"})," using ",(0,s.jsx)(n.code,{children:"cppPart.pointee.*"}),")? Pin Swift 5.10 for the ",(0,s.jsx)(n.code,{children:"NitroModules"})," pod (see snippet below) as a temporary workaround."]}),"\n",(0,s.jsxs)(n.li,{children:["Recommended path: Upgrade to RN 0.79+, update ",(0,s.jsx)(n.code,{children:"react-native-nitro-modules"})," and ",(0,s.jsx)(n.code,{children:"nitro-codegen"})," to latest, then ",(0,s.jsx)(n.code,{children:"pod install"})," and do a clean build."]}),"\n",(0,s.jsxs)(n.li,{children:["Easier alternative: Consider React Native IAP; installing ",(0,s.jsx)(n.code,{children:"expo-modules-core"})," first usually smooths setup. Docs: ",(0,s.jsx)(n.a,{href:"https://expo-iap.hyo.dev/docs/installation",children:"expo-iap installation"})]}),"\n"]}),(0,s.jsxs)(n.p,{children:["If issues persist after upgrading or applying the Swift pin, please share a minimal repro (fresh app + ",(0,s.jsx)(n.code,{children:"package.json"})," + ",(0,s.jsx)(n.code,{children:"Podfile"}),"). :::"]}),(0,s.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),(0,s.jsx)(n.p,{children:"Before installing React Native IAP, make sure you have:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["For ",(0,s.jsx)(n.code,{children:"react-native-iap@14.x"})," (Nitro): ",(0,s.jsx)(n.strong,{children:"React Native 0.79+"})," (Expo SDK aligned with RN 0.79)"]}),"\n",(0,s.jsxs)(n.li,{children:["For older RN (0.75.x or lower): use ",(0,s.jsx)(n.code,{children:"react-native-iap@13.1.0"})," (pre\u2011Nitro)"]}),"\n",(0,s.jsx)(n.li,{children:"Node.js 16 or later"}),"\n",(0,s.jsx)(n.li,{children:"iOS 15+ for iOS apps (StoreKit 2 requirement)"}),"\n",(0,s.jsx)(n.li,{children:"Android API level 21+ for Android apps"}),"\n"]}),(0,s.jsx)(n.h2,{id:"package-installation",children:"Package Installation"}),(0,s.jsx)(n.p,{children:"Install the package using your favorite package manager:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm install react-native-iap react-native-nitro-modules\n"})}),(0,s.jsx)(n.h3,{id:"important-for-expo-managed-workflow",children:"Important for Expo Managed Workflow"}),(0,s.jsxs)(n.p,{children:["If you're using the Expo managed workflow, you ",(0,s.jsx)(n.strong,{children:"must"})," use a ",(0,s.jsx)(n.a,{href:"https://docs.expo.dev/versions/latest/sdk/dev-client/",children:"custom development client"})," since in-app purchases require native modules that aren't available in Expo Go."]}),(0,s.jsx)(n.p,{children:"After installing the package, you need to:"}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Configure expo-build-properties for Android"})," (required for Kotlin 2.0+ support):"]}),"\n",(0,s.jsxs)(n.p,{children:["Starting from version 14.0.0-rc, react-native-iap supports Google Play Billing Library v8.0.0, which requires Kotlin 2.0+. Since ",(0,s.jsx)(n.code,{children:"expo-modules-core"})," doesn't support Kotlin 2.0 yet, you need to manually configure the Kotlin version."]}),"\n",(0,s.jsxs)(n.p,{children:["Add the following to your ",(0,s.jsx)(n.code,{children:"app.json"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "expo": {\n    "plugins": [\n      "react-native-iap",\n      [\n        "expo-build-properties",\n        {\n          "android": {\n            "kotlinVersion": "2.1.20"\n          }\n        }\n      ]\n    ]\n  }\n}\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Install the plugin and run prebuild"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npx expo prebuild --clean\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This will generate the native iOS and Android directories with the necessary configurations. Learn more about ",(0,s.jsx)(n.a,{href:"https://docs.expo.dev/guides/adopting-prebuild/",children:"adopting prebuild"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Create a development build"})," (see the Platform Configuration section below for details)"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Optional: Fix iOS Folly coroutine include error"}),"\n",(0,s.jsxs)(n.p,{children:["If your iOS build fails with errors such as ",(0,s.jsx)(n.code,{children:"'folly/coro/Coroutine.h' file not found"})," from ",(0,s.jsx)(n.code,{children:"RCT-Folly/folly/Expected.h"}),", you can opt\u2011in to a workaround that disables Folly coroutine support during CocoaPods install."]}),"\n",(0,s.jsxs)(n.p,{children:["Add this flag to the ",(0,s.jsx)(n.code,{children:"react-native-iap"})," plugin options in your Expo config:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "expo": {\n    "plugins": [\n      [\n        "react-native-iap",\n        {\n          "ios": {\n            "with-folly-no-coroutines": true\n          }\n        }\n      ]\n    ]\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Note migration:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["This option key was renamed from ",(0,s.jsx)(n.code,{children:"with-folly-no-couroutines"})," to ",(0,s.jsx)(n.code,{children:"with-folly-no-coroutines"}),". Update your Expo config accordingly. For compatibility, the plugin temporarily accepts the old key and logs a deprecation warning."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"What this does:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Injects ",(0,s.jsx)(n.code,{children:"FOLLY_NO_CONFIG=1"}),", ",(0,s.jsx)(n.code,{children:"FOLLY_CFG_NO_COROUTINES=1"}),", and ",(0,s.jsx)(n.code,{children:"FOLLY_HAS_COROUTINES=0"})," into the Podfile ",(0,s.jsx)(n.code,{children:"post_install"})," block for all Pods targets, preventing ",(0,s.jsx)(n.code,{children:"RCT-Folly"})," from including non\u2011vendored ",(0,s.jsx)(n.code,{children:"<folly/coro/*>"})," headers."]}),"\n",(0,s.jsx)(n.li,{children:"Idempotent: skips if you already set these defines yourself."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"After enabling the flag, re-run prebuild and install pods:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"rm -rf ios"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"npx expo prebuild -p ios"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"cd ios && LANG=en_US.UTF-8 pod install --repo-update"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"npx expo run:ios"})}),"\n"]}),"\n"]}),"\n"]}),(0,s.jsx)(n.h2,{id:"platform-configuration",children:"Platform Configuration"}),(0,s.jsx)(n.h3,{id:"for-expo-managed-workflow",children:"For Expo Managed Workflow"}),(0,s.jsxs)(n.p,{children:["If you're using Expo managed workflow, you'll need to create a ",(0,s.jsx)(n.a,{href:"https://docs.expo.dev/development/create-development-builds/",children:"custom development client"})," since in-app purchases require native modules that aren't available in Expo Go."]}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Install EAS CLI"})," (if not already installed):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm install -g eas-cli\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Create a development build"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"eas build --platform ios --profile development\neas build --platform android --profile development\n"})}),"\n"]}),"\n"]}),(0,s.jsx)(n.h3,{id:"for-react-native-cli-projects",children:"For React Native CLI Projects"}),(0,s.jsx)(n.h4,{id:"ios",children:"iOS"}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Install pods"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd ios && pod install\n// or npx pod-install\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Add StoreKit capability"})," to your iOS app in Xcode:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Open your project in Xcode"}),"\n",(0,s.jsx)(n.li,{children:"Select your app target"}),"\n",(0,s.jsx)(n.li,{children:'Go to "Signing & Capabilities"'}),"\n",(0,s.jsx)(n.li,{children:'Click "+ Capability" and add "In-App Purchase"'}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Swift 6 interop workaround (temporary)"})}),"\n",(0,s.jsxs)(n.p,{children:["If you see Swift/C++ interop errors from Nitro (e.g. ",(0,s.jsx)(n.code,{children:"AnyMap.swift"})," with ",(0,s.jsx)(n.code,{children:"cppPart.pointee.*"}),"), pin Swift to 5.10 for the NitroModules pod in your ",(0,s.jsx)(n.code,{children:"ios/Podfile"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"post_install do |installer|\n  react_native_post_install(installer, config[:reactNativePath])\n  installer.pods_project.targets.each do |t|\n    if t.name == 'NitroModules'\n      t.build_configurations.each { |c| c.build_settings['SWIFT_VERSION'] = '5.10' }\n    end\n  end\nend\n"})}),"\n"]}),"\n"]}),(0,s.jsx)(n.h4,{id:"android",children:"Android"}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Important:"})," Starting from version 14.0.0-rc, react-native-iap supports Google Play Billing Library v8.0.0, which requires Kotlin 2.0+."]}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Configure Kotlin version"})," in your root ",(0,s.jsx)(n.code,{children:"android/build.gradle"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gradle",children:'buildscript {\n    ext {\n        kotlinVersion = "2.1.20"\n    }\n    dependencies {\n        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"\n    }\n}\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Add billing dependencies"})," to your ",(0,s.jsx)(n.code,{children:"android/app/build.gradle"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gradle",children:'dependencies {\n    implementation "com.android.billingclient:billing-ktx:8.0.0"\n    implementation "com.google.android.gms:play-services-base:18.1.0"\n}\n'})}),"\n"]}),"\n"]}),(0,s.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),(0,s.jsx)(n.h3,{id:"1-basic-setup",children:"1. Basic Setup"}),(0,s.jsx)(n.p,{children:"First, import and initialize the IAP hook:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import {useIAP} from 'react-native-iap';\n\nfunction MyStore() {\n  const {\n    connected,\n    products,\n    fetchProducts,\n    requestPurchase,\n    currentPurchase,\n    finishTransaction,\n  } = useIAP();\n\n  const productIds = ['your.product.id', 'your.premium.subscription'];\n}\n"})}),(0,s.jsx)(n.h3,{id:"2-fetch-products",children:"2. Fetch Products"}),(0,s.jsx)(n.p,{children:"Load your products when the store connects:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"useEffect(() => {\n  if (connected) {\n    // Fetch your products\n    fetchProducts({skus: productIds, type: 'in-app'});\n  }\n}, [connected]);\n"})}),(0,s.jsx)(n.h3,{id:"3-display-products",children:"3. Display Products"}),(0,s.jsx)(n.p,{children:"Show available products to users:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"return (\n  <View>\n    <Text>Store Status: {connected ? 'Connected' : 'Connecting...'}</Text>\n\n    {products.map((product) => (\n      <View key={product.id} style={styles.productItem}>\n        <Text style={styles.productTitle}>{product.title}</Text>\n        <Text style={styles.productPrice}>{product.displayPrice}</Text>\n        <Button title=\"Buy Now\" onPress={() => handlePurchase(product.id)} />\n      </View>\n    ))}\n  </View>\n);\n"})}),(0,s.jsx)(n.h3,{id:"4-handle-purchases",children:"4. Handle Purchases"}),(0,s.jsx)(n.p,{children:"Process purchase requests with our platform-specific API (v14.0.0-rc Current):"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"const handlePurchase = async (productId: string) => {\n  try {\n    await requestPurchase({\n      request: {\n        ios: {\n          sku: productId,\n        },\n        android: {\n          skus: [productId],\n        },\n      },\n    });\n  } catch (error) {\n    console.error('Purchase failed:', error);\n  }\n};\n"})}),(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note:"})," No more Platform.OS checks! The new API automatically handles platform differences. iOS can only purchase one product at a time, while Android supports purchasing multiple products in a single transaction."]}),"\n"]}),(0,s.jsx)(n.h3,{id:"5-complete-transactions",children:"5. Complete Transactions"}),(0,s.jsx)(n.p,{children:"Finish purchases when they complete:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"useEffect(() => {\n  if (currentPurchase) {\n    const completePurchase = async () => {\n      try {\n        // Grant the purchase to user here\n        console.log('Purchase completed:', currentPurchase.id);\n\n        // Finish the transaction\n        await finishTransaction({\n          purchase: currentPurchase,\n          isConsumable: true, // Set based on your product type\n        });\n      } catch (error) {\n        console.error('Failed to complete purchase:', error);\n      }\n    };\n\n    completePurchase();\n  }\n}, [currentPurchase]);\n"})}),(0,s.jsx)(n.h3,{id:"complete-basic-example",children:"Complete Basic Example"}),(0,s.jsx)(n.p,{children:"Here's a complete working example:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import React, {useEffect} from 'react';\nimport {View, Text, Button, StyleSheet} from 'react-native';\nimport {useIAP} from 'react-native-iap';\n\nexport default function SimpleStore() {\n  const {\n    connected,\n    products,\n    fetchProducts,\n    requestPurchase,\n    currentPurchase,\n    finishTransaction,\n  } = useIAP();\n\n  const productIds = ['com.example.coins.pack1', 'com.example.premium'];\n\n  useEffect(() => {\n    if (connected) {\n      fetchProducts({skus: productIds, type: 'in-app'});\n    }\n  }, [connected]);\n\n  useEffect(() => {\n    if (currentPurchase) {\n      const completePurchase = async () => {\n        try {\n          console.log('Purchase completed:', currentPurchase.id);\n          await finishTransaction({\n            purchase: currentPurchase,\n            isConsumable: true,\n          });\n        } catch (error) {\n          console.error('Failed to complete purchase:', error);\n        }\n      };\n      completePurchase();\n    }\n  }, [currentPurchase]);\n\n  const handlePurchase = async (productId: string) => {\n    try {\n      await requestPurchase({\n        request: {\n          ios: {\n            sku: productId,\n          },\n          android: {\n            skus: [productId],\n          },\n        },\n      });\n    } catch (error) {\n      console.error('Purchase failed:', error);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.status}>\n        Store: {connected ? 'Connected \u2705' : 'Connecting...'}\n      </Text>\n\n      {products.map((product) => (\n        <View key={product.id} style={styles.product}>\n          <Text style={styles.title}>{product.title}</Text>\n          <Text style={styles.price}>{product.displayPrice}</Text>\n          <Button title=\"Buy Now\" onPress={() => handlePurchase(product.id)} />\n        </View>\n      ))}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {padding: 20},\n  status: {fontSize: 16, marginBottom: 20},\n  product: {\n    padding: 15,\n    marginVertical: 5,\n    backgroundColor: '#f0f0f0',\n    borderRadius: 8,\n  },\n  title: {fontSize: 16, fontWeight: 'bold'},\n  price: {fontSize: 14, color: '#666', marginVertical: 5},\n});\n"})}),(0,s.jsx)(n.h2,{id:"store-configuration",children:"Store Configuration"}),(0,s.jsx)(n.p,{children:"React Native IAP is OpenIAP compliant. For detailed instructions on setting up your products in each store:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"iOS"}),": ",(0,s.jsx)(n.a,{href:"https://www.openiap.dev/docs/ios-setup",children:"OpenIAP iOS Setup Guide"})," - App Store Connect configuration"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Android"}),": ",(0,s.jsx)(n.a,{href:"https://www.openiap.dev/docs/android-setup",children:"OpenIAP Android Setup Guide"})," - Google Play Console configuration"]}),"\n"]}),(0,s.jsx)(n.h2,{id:"verification",children:"Verification"}),(0,s.jsx)(n.p,{children:"To verify that React Native IAP is properly installed, create a simple test:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import {useIAP} from 'react-native-iap';\n\nfunction TestComponent() {\n  const {connected} = useIAP();\n\n  console.log('IAP Connection status:', connected);\n\n  return null;\n}\n"})}),(0,s.jsx)(n.p,{children:"If everything is set up correctly, you should see the connection status logged in your console."}),(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),(0,s.jsx)(n.p,{children:"Now that you have React Native IAP installed, you can:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"./getting-started/setup-ios",children:"Set up iOS configuration"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"./getting-started/setup-android",children:"Set up Android configuration"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"./guides/getting-started",children:"Learn basic usage"})}),"\n"]}),(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),(0,s.jsx)(n.p,{children:"If you encounter issues during installation:"}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Clear node_modules and reinstall"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"rm -rf node_modules\nnpm install\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"For iOS, clean and rebuild pods"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd ios\nrm -rf Pods Podfile.lock\npod install\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"For Expo projects"}),", use prebuild instead:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npx expo prebuild --clean\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"For React Native, reset Metro cache"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npx react-native start --reset-cache\n"})}),"\n"]}),"\n"]}),(0,s.jsxs)(n.p,{children:["For more help, check our ",(0,s.jsx)(n.a,{href:"./guides/troubleshooting",children:"Troubleshooting Guide"})," or ",(0,s.jsx)(n.a,{href:"https://github.com/hyochan/react-native-iap/issues",children:"open an issue"})," on GitHub."]})]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var r=i(6540);const s={},t=r.createContext(s);function o(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);