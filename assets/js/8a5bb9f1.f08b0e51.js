"use strict";(self.webpackChunkreact_native_iap_docs=self.webpackChunkreact_native_iap_docs||[]).push([[5359],{571:(e,n,s)=>{s.d(n,{A:()=>t});var r=s(6540),i=s(4848);function o({className:e="adfit",style:n,unit:s,height:o,width:t}){return(0,r.useEffect)(()=>{const n=setTimeout(()=>{const n=document.querySelector(`.${e}`);if(!n)return void console.warn(`AdFit: Element with class "${e}" not found`);const r=n.querySelectorAll(".kakao_ad_area"),i=n.querySelectorAll('script[src*="kas/static/ba.min.js"]');r.forEach(e=>e.remove()),i.forEach(e=>e.remove());const c=document.createElement("ins"),a=document.createElement("script");c.className="kakao_ad_area",c.style.cssText="display:none; width:100%;",a.async=!0,a.type="text/javascript",a.src="//t1.daumcdn.net/kas/static/ba.min.js",c.setAttribute("data-ad-width",t.toString()),c.setAttribute("data-ad-height",o.toString()),c.setAttribute("data-ad-unit",s),n.appendChild(c),n.appendChild(a)},100);return()=>clearTimeout(n)},[e,s,o,t]),(0,i.jsx)("div",{style:n,children:(0,i.jsx)("div",{className:e})})}function t(){return(0,i.jsx)(o,{unit:"DAN-YTmjDwlbcP42HBg6",height:100,width:320,className:"adfit-top",style:{flex:1,marginTop:24,marginBottom:24}})}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>c});var r=s(6540);const i={},o=r.createContext(i);function t(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(o.Provider,{value:n},e.children)}},8829:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>c,metadata:()=>r,toc:()=>f});const r=JSON.parse('{"id":"guides/subscription-offers","title":"Subscription Offers","description":"This guide explains how to handle subscription offers (pricing plans) when purchasing subscriptions on iOS and Android platforms.","source":"@site/docs/guides/subscription-offers.md","sourceDirName":"guides","slug":"/guides/subscription-offers","permalink":"/react-native-iap/docs/guides/subscription-offers","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/react-native-iap/tree/main/docs/docs/guides/subscription-offers.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Subscription Offers","sidebar_label":"Subscription Offers","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Purchase Lifecycle","permalink":"/react-native-iap/docs/guides/lifecycle"},"next":{"title":"Subscription Validation","permalink":"/react-native-iap/docs/guides/subscription-validation"}}');var i=s(4848),o=s(8453),t=s(571);const c={title:"Subscription Offers",sidebar_label:"Subscription Offers",sidebar_position:3},a="Subscription Offers",d={},f=[{value:"Overview",id:"overview",level:2},{value:"Platform Differences",id:"platform-differences",level:2},{value:"Android Subscription Offers",id:"android-subscription-offers",level:3},{value:"Required for Android Subscriptions",id:"required-for-android-subscriptions",level:4},{value:"Getting Offer Tokens",id:"getting-offer-tokens",level:4},{value:"Purchase with Offers",id:"purchase-with-offers",level:4},{value:"Understanding Offer Details",id:"understanding-offer-details",level:4},{value:"iOS Subscription Offers",id:"ios-subscription-offers",level:3},{value:"Base Plan (Default)",id:"base-plan-default",level:4},{value:"Promotional Offers (Optional)",id:"promotional-offers-optional",level:4},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Selecting Specific Offers",id:"selecting-specific-offers",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Android Errors",id:"android-errors",level:3},{value:"iOS Errors",id:"ios-errors",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"See Also",id:"see-also",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"subscription-offers",children:"Subscription Offers"})}),"\n",(0,i.jsx)(t.A,{}),"\n",(0,i.jsx)(n.p,{children:"This guide explains how to handle subscription offers (pricing plans) when purchasing subscriptions on iOS and Android platforms."}),"\n",(0,i.jsxs)(n.p,{children:["For a complete implementation example, see the ",(0,i.jsx)(n.a,{href:"/react-native-iap/docs/examples/subscription-flow",children:"Subscription Flow Example"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"Subscription offers represent different pricing plans for the same subscription product:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Base Plan"}),": The standard pricing for a subscription"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Introductory Offers"}),": Special pricing for new subscribers (free trial, discounted period)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Promotional Offers"}),": Limited-time discounts configured in the app stores"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"platform-differences",children:"Platform Differences"}),"\n",(0,i.jsx)(n.p,{children:"At a glance:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Android: subscription offers are required when purchasing subscriptions. You must pass ",(0,i.jsx)(n.code,{children:"subscriptionOffers"})," with one or more offer tokens from ",(0,i.jsx)(n.code,{children:"fetchProducts()"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["iOS: base plan is used by default. Promotional discounts are optional via ",(0,i.jsx)(n.code,{children:"withOffer"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Tip: Always fetch products first; offers only exist after ",(0,i.jsx)(n.code,{children:"fetchProducts({ type: 'subs' })"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"android-subscription-offers",children:"Android Subscription Offers"}),"\n",(0,i.jsxs)(n.p,{children:["Android requires explicit specification of subscription offers when purchasing. Each offer is identified by an ",(0,i.jsx)(n.code,{children:"offerToken"})," obtained from ",(0,i.jsx)(n.code,{children:"fetchProducts()"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"required-for-android-subscriptions",children:"Required for Android Subscriptions"}),"\n",(0,i.jsxs)(n.p,{children:["Unlike iOS, Android subscriptions ",(0,i.jsx)(n.strong,{children:"must"})," include ",(0,i.jsx)(n.code,{children:"subscriptionOffers"})," in the purchase request. Without it, the purchase will fail with:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"The number of skus (1) must match: the number of offerTokens (0)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"getting-offer-tokens",children:"Getting Offer Tokens"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {useIAP} from 'react-native-iap';\n\nconst SubscriptionComponent = () => {\n  const {connected, subscriptions, fetchProducts, requestPurchase} = useIAP();\n\n  // 1) Fetch subscription products\n  useEffect(() => {\n    if (connected) {\n      fetchProducts({skus: ['premium_monthly'], type: 'subs'});\n    }\n  }, [connected]);\n\n  // 2) Access offer details from fetched subscriptions\n  const subscription = subscriptions.find((s) => s.id === 'premium_monthly');\n\n  if (subscription?.subscriptionOfferDetailsAndroid) {\n    console.log(\n      'Available offers:',\n      subscription.subscriptionOfferDetailsAndroid,\n    );\n    // Each offer contains: basePlanId, offerId?, offerTags, offerToken, pricingPhases\n  }\n};\n"})}),"\n",(0,i.jsx)(n.h4,{id:"purchase-with-offers",children:"Purchase with Offers"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"const purchaseSubscription = async (subscriptionId: string) => {\n  const subscription = subscriptions.find((s) => s.id === subscriptionId);\n  if (!subscription) return;\n\n  // Build subscriptionOffers from fetched data\n  const subscriptionOffers = (\n    subscription.subscriptionOfferDetailsAndroid ?? []\n  ).map((offer) => ({\n    sku: subscriptionId,\n    offerToken: offer.offerToken,\n  }));\n\n  // Only proceed if offers are available\n  if (subscriptionOffers.length === 0) {\n    console.error('No subscription offers available');\n    return;\n  }\n\n  await requestPurchase({\n    request: {\n      ios: {sku: subscriptionId},\n      android: {\n        skus: [subscriptionId],\n        // Required for Android: include only when offers are available\n        ...(subscriptionOffers.length > 0 && {subscriptionOffers}),\n      },\n    },\n    type: 'subs',\n  });\n};\n"})}),"\n",(0,i.jsx)(n.h4,{id:"understanding-offer-details",children:"Understanding Offer Details"}),"\n",(0,i.jsxs)(n.p,{children:["Each ",(0,i.jsx)(n.code,{children:"subscriptionOfferDetailsAndroid"})," item contains:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"interface ProductSubscriptionAndroidOfferDetails {\n  basePlanId: string; // Base plan identifier\n  offerId?: string | null; // Offer identifier (null for base plan)\n  offerTags: string[]; // Tags associated with the offer\n  offerToken: string; // Token required for purchase\n  pricingPhases: PricingPhasesAndroid; // Pricing information\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"ios-subscription-offers",children:"iOS Subscription Offers"}),"\n",(0,i.jsx)(n.p,{children:"iOS handles subscription offers differently - the base plan is used by default, and promotional offers are optional."}),"\n",(0,i.jsx)(n.h4,{id:"base-plan-default",children:"Base Plan (Default)"}),"\n",(0,i.jsx)(n.p,{children:"For standard subscription purchases, no special offer specification is needed:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"await requestPurchase({\n  request: {\n    ios: {sku: 'premium_monthly'},\n    android: {\n      skus: [\n        'premium_monthly',\n      ] /* include subscriptionOffers only if available */,\n    },\n  },\n  type: 'subs',\n});\n"})}),"\n",(0,i.jsx)(n.h4,{id:"promotional-offers-optional",children:"Promotional Offers (Optional)"}),"\n",(0,i.jsxs)(n.p,{children:["iOS supports promotional offers through the ",(0,i.jsx)(n.code,{children:"withOffer"})," parameter. These are configured in App Store Connect."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"interface DiscountOfferInputIOS {\n  offerIdentifier: string;    // From App Store Connect\n  keyIdentifier: string;      // From App Store Connect\n  nonce: string;              // UUID string\n  signature: string;          // From App Store Connect\n  timestamp: number;          // Unix timestamp\n}\n\nconst purchaseWithPromotionalOffer = async (\n  subscriptionId: string,\n  promotionalOffer: DiscountOfferInputIOS\n) => {\n  await requestPurchase({\n    request: {\n      ios: {\n        sku: subscriptionId,\n        withOffer: promotionalOffer, // Apply promotional discount\n      },\n      android: {skus: [subscriptionId], subscriptionOffers: [...]},\n    },\n    type: 'subs',\n  });\n};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,i.jsx)(n.h3,{id:"selecting-specific-offers",children:"Selecting Specific Offers"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"const selectOffer = (\n  subscription: ProductSubscription,\n  offerType: 'base' | 'introductory',\n) => {\n  if (Platform.OS === 'ios') {\n    // iOS doesn't need explicit offer selection for base plan\n    return null;\n  }\n\n  // Android: Select offer based on type\n  const offers = subscription.subscriptionOfferDetailsAndroid ?? [];\n\n  if (offerType === 'base') {\n    // Find base plan (no offerId)\n    return offers.find((offer) => !offer.offerId);\n  } else {\n    // Find introductory offer\n    return offers.find((offer) => offer.offerId?.includes('introductory'));\n  }\n};\n\nconst purchaseWithSelectedOffer = async (\n  subscriptionId: string,\n  offerType: 'base' | 'introductory' = 'base',\n) => {\n  const subscription = subscriptions.find((s) => s.id === subscriptionId);\n  if (!subscription) return;\n\n  const selectedOffer = selectOffer(subscription, offerType);\n\n  if (Platform.OS === 'android') {\n    const subscriptionOffers = selectedOffer\n      ? [\n          {\n            sku: subscriptionId,\n            offerToken: selectedOffer.offerToken,\n          },\n        ]\n      : [];\n\n    if (subscriptionOffers.length === 0) {\n      console.error('No suitable offer found');\n      return;\n    }\n\n    await requestPurchase({\n      request: {\n        ios: {sku: subscriptionId},\n        android: {\n          skus: [subscriptionId],\n          // Required for Android: include only when you found a valid offer\n          ...(subscriptionOffers.length > 0 && {subscriptionOffers}),\n        },\n      },\n      type: 'subs',\n    });\n  } else {\n    // iOS: Could add promotional offer logic here\n    await requestPurchase({\n      request: {\n        ios: {sku: subscriptionId},\n        android: {\n          skus: [\n            subscriptionId,\n          ] /* include subscriptionOffers only if available */,\n        },\n      },\n      type: 'subs',\n    });\n  }\n};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsx)(n.h3,{id:"android-errors",children:"Android Errors"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"const {requestPurchase} = useIAP({\n  onPurchaseError: (error) => {\n    if (error.message.includes('offerTokens')) {\n      console.error('Missing subscription offers for Android purchase');\n      // Ensure subscriptionOffers is included and valid\n    }\n  },\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"ios-errors",children:"iOS Errors"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"const {requestPurchase} = useIAP({\n  onPurchaseError: (error) => {\n    if (error.code === 'INVALID_OFFER') {\n      console.error('Invalid promotional offer for iOS');\n      // Check offerIdentifier, signature, etc.\n    }\n  },\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Always fetch products first"}),": Subscription offers are only available after ",(0,i.jsx)(n.code,{children:"fetchProducts()"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Handle platform differences"}),": Android requires offers, iOS makes them optional."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Validate offers"}),": Check that offers exist before attempting purchase."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"User selection"}),": Allow users to choose between different pricing plans when multiple offers are available."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Error recovery"}),": Provide fallback to base plan if selected offer fails."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../api/use-iap",children:"useIAP Hook"})," - Main API documentation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../examples/subscription-flow",children:"Subscription Flow Example"})," - Complete implementation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../api/error-codes",children:"Error Codes"})," - Purchase error handling"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);