"use strict";(self.webpackChunkreact_native_iap_docs=self.webpackChunkreact_native_iap_docs||[]).push([[2183],{571:(e,n,s)=>{s.d(n,{A:()=>c});var t=s(6540),r=s(4848);function i({className:e="adfit",style:n,unit:s,height:i,width:c}){return(0,t.useEffect)(()=>{const n=setTimeout(()=>{const n=document.querySelector(`.${e}`);if(!n)return void console.warn(`AdFit: Element with class "${e}" not found`);const t=n.querySelectorAll(".kakao_ad_area"),r=n.querySelectorAll('script[src*="kas/static/ba.min.js"]');t.forEach(e=>e.remove()),r.forEach(e=>e.remove());const a=document.createElement("ins"),o=document.createElement("script");a.className="kakao_ad_area",a.style.cssText="display:none; width:100%;",o.async=!0,o.type="text/javascript",o.src="//t1.daumcdn.net/kas/static/ba.min.js",a.setAttribute("data-ad-width",c.toString()),a.setAttribute("data-ad-height",i.toString()),a.setAttribute("data-ad-unit",s),n.appendChild(a),n.appendChild(o)},100);return()=>clearTimeout(n)},[e,s,i,c]),(0,r.jsx)("div",{style:n,children:(0,r.jsx)("div",{className:e})})}function c(){return(0,r.jsx)(i,{unit:"DAN-YTmjDwlbcP42HBg6",height:100,width:320,className:"adfit-top",style:{flex:1,marginTop:24,marginBottom:24}})}},8453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>a});var t=s(6540);const r={},i=t.createContext(r);function c(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),t.createElement(i.Provider,{value:n},e.children)}},9438:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"guides/lifecycle","title":"Purchase Lifecycle","description":"Understanding the purchase lifecycle is crucial for building robust in-app purchase functionality. This guide covers the various stages of a purchase, from connection initialization to transaction completion.","source":"@site/docs/guides/lifecycle.md","sourceDirName":"guides","slug":"/guides/lifecycle","permalink":"/react-native-iap/docs/guides/lifecycle","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/react-native-iap/tree/main/docs/docs/guides/lifecycle.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Purchase Lifecycle","sidebar_label":"Purchase Lifecycle","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Purchases","permalink":"/react-native-iap/docs/guides/purchases"},"next":{"title":"Subscription Offers","permalink":"/react-native-iap/docs/guides/subscription-offers"}}');var r=s(4848),i=s(8453),c=s(571);const a={title:"Purchase Lifecycle",sidebar_label:"Purchase Lifecycle",sidebar_position:2},o="Purchase Lifecycle",l={},d=[{value:"Overview",id:"overview",level:2},{value:"1. Initialize Connection",id:"1-initialize-connection",level:2},{value:"2. Fetch Products",id:"2-fetch-products",level:2},{value:"3. Request Purchase",id:"3-request-purchase",level:2},{value:"4. Handle Purchase Updates",id:"4-handle-purchase-updates",level:2},{value:"5. Validate Receipt",id:"5-validate-receipt",level:2},{value:"6. Finish Transaction",id:"6-finish-transaction",level:2},{value:"Important Considerations",id:"important-considerations",level:2},{value:"App State and Background Purchases",id:"app-state-and-background-purchases",level:3},{value:"Consumable vs. Non-Consumable Products",id:"consumable-vs-non-consumable-products",level:3},{value:"Restoring Purchases",id:"restoring-purchases",level:3},{value:"Next Steps",id:"next-steps",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"purchase-lifecycle",children:"Purchase Lifecycle"})}),"\n",(0,r.jsx)(c.A,{}),"\n",(0,r.jsx)(n.p,{children:"Understanding the purchase lifecycle is crucial for building robust in-app purchase functionality. This guide covers the various stages of a purchase, from connection initialization to transaction completion."}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"The typical purchase lifecycle involves these steps:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Initialize Connection"}),": Establish communication with the app store."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Fetch Products"}),": Retrieve product information (prices, descriptions)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Request Purchase"}),": Initiate the purchase process."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Handle Purchase Updates"}),": Process successful purchases or errors."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Validate Receipt"}),": Verify the purchase on your server."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Finish Transaction"}),": Complete the transaction with the app store."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"1-initialize-connection",children:"1. Initialize Connection"}),"\n",(0,r.jsxs)(n.p,{children:["Before any IAP operations, you must initialize the connection to the app store. The ",(0,r.jsx)(n.code,{children:"useIAP"})," hook handles this automatically on component mount."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import {useIAP} from 'react-native-iap';\n\nfunction App() {\n  const {connected} = useIAP();\n\n  if (!connected) {\n    return <Text>Connecting to store...</Text>;\n  }\n  return <MyStore />; // Render your store UI when connected\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"2-fetch-products",children:"2. Fetch Products"}),"\n",(0,r.jsxs)(n.p,{children:["Once connected, fetch product details from the store. This populates the ",(0,r.jsx)(n.code,{children:"products"})," and ",(0,r.jsx)(n.code,{children:"subscriptions"})," state in the ",(0,r.jsx)(n.code,{children:"useIAP"})," hook."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import {useIAP} from 'react-native-iap';\n\nfunction MyStore() {\n  const {connected, products, fetchProducts} = useIAP();\n\n  useEffect(() => {\n    if (connected) {\n      fetchProducts({skus: ['com.example.product1'], type: 'in-app'});\n    }\n  }, [connected, fetchProducts]);\n\n  return (\n    <View>\n      {products.map((product) => (\n        <Text key={product.id}>{product.title}</Text>\n      ))}\n    </View>\n  );\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"3-request-purchase",children:"3. Request Purchase"}),"\n",(0,r.jsxs)(n.p,{children:["Initiate a purchase when the user selects a product. The ",(0,r.jsx)(n.code,{children:"requestPurchase"})," method handles platform-specific differences."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import {useIAP} from 'react-native-iap';\n\nfunction ProductItem({productId}: {productId: string}) {\n  const {requestPurchase} = useIAP();\n\n  const buyProduct = async () => {\n    try {\n      await requestPurchase({\n        request: {\n          ios: {sku: productId},\n          android: {skus: [productId]},\n        },\n      });\n    } catch (error) {\n      console.error('Purchase request failed:', error);\n    }\n  };\n\n  return <Button title=\"Buy\" onPress={buyProduct} />;\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"4-handle-purchase-updates",children:"4. Handle Purchase Updates"}),"\n",(0,r.jsxs)(n.p,{children:["After ",(0,r.jsx)(n.code,{children:"requestPurchase"})," is called, the app store processes the purchase. The ",(0,r.jsx)(n.code,{children:"useIAP"})," hook provides ",(0,r.jsx)(n.code,{children:"onPurchaseSuccess"})," and ",(0,r.jsx)(n.code,{children:"onPurchaseError"})," callbacks to handle the outcome."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import {useIAP} from 'react-native-iap';\n\nfunction App() {\n  const {connected} = useIAP({\n    onPurchaseSuccess: (purchase) => {\n      console.log('Purchase successful:', purchase);\n      // Proceed to server validation and finish transaction\n    },\n    onPurchaseError: (error) => {\n      console.error('Purchase failed:', error);\n      // Handle error, e.g., show alert to user\n    },\n  });\n\n  return <MyStore />;\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"5-validate-receipt",children:"5. Validate Receipt"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Crucial for security"}),": Always validate purchases on your secure backend server. This prevents fraud and ensures the integrity of your app's economy."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"const validateReceiptOnServer = async (purchase) => {\n  const response = await fetch('https://your-server.com/validate-receipt', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      productId: purchase.productId,\n      purchaseToken: purchase.purchaseToken, // Unified token\n      // Add other platform-specific data as needed\n    }),\n  });\n  const result = await response.json();\n  return result.isValid; // Your server should return if the receipt is valid\n};\n"})}),"\n",(0,r.jsx)(n.h2,{id:"6-finish-transaction",children:"6. Finish Transaction"}),"\n",(0,r.jsxs)(n.p,{children:["After successful server-side validation, you ",(0,r.jsx)(n.strong,{children:"must"})," call ",(0,r.jsx)(n.code,{children:"finishTransaction"})," to complete the purchase with the app store. Failing to do so can lead to repeated purchase notifications and potential refunds."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import {useIAP} from 'react-native-iap';\n\nfunction App() {\n  const {finishTransaction} = useIAP({\n    onPurchaseSuccess: async (purchase) => {\n      const isValid = await validateReceiptOnServer(purchase);\n      if (isValid) {\n        // Grant user access to content\n        await grantContentToUser(purchase);\n        await finishTransaction({purchase});\n        console.log('Transaction finished');\n      } else {\n        console.error('Invalid receipt');\n      }\n    },\n  });\n\n  return <MyStore />;\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"important-considerations",children:"Important Considerations"}),"\n",(0,r.jsx)(n.h3,{id:"app-state-and-background-purchases",children:"App State and Background Purchases"}),"\n",(0,r.jsxs)(n.p,{children:["Purchases can complete even when your app is in the background or has been terminated. The ",(0,r.jsx)(n.code,{children:"useIAP"})," hook is designed to handle these scenarios by processing pending transactions on app launch."]}),"\n",(0,r.jsx)(n.h3,{id:"consumable-vs-non-consumable-products",children:"Consumable vs. Non-Consumable Products"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Consumable"}),": Items that can be purchased multiple times (e.g., coins, lives). You should set ",(0,r.jsx)(n.code,{children:"isConsumable: true"})," in ",(0,r.jsx)(n.code,{children:"finishTransaction"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Non-Consumable"}),": Items purchased once (e.g., premium features, subscriptions). Set ",(0,r.jsx)(n.code,{children:"isConsumable: false"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"restoring-purchases",children:"Restoring Purchases"}),"\n",(0,r.jsxs)(n.p,{children:["Users should always have the option to restore non-consumable products and subscriptions. Use ",(0,r.jsx)(n.code,{children:"getAvailablePurchases()"})," for this."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import {useIAP} from 'react-native-iap';\n\nfunction RestoreButton() {\n  const {getAvailablePurchases, finishTransaction} = useIAP();\n\n  const restore = async () => {\n    try {\n      const purchases = await getAvailablePurchases();\n      for (const purchase of purchases) {\n        const isValid = await validateReceiptOnServer(purchase);\n        if (isValid) {\n          await grantContentToUser(purchase);\n          await finishTransaction({purchase});\n        }\n      }\n      console.log('Purchases restored');\n    } catch (error) {\n      console.error('Restore failed:', error);\n    }\n  };\n\n  return <Button title=\"Restore Purchases\" onPress={restore} />;\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"../examples/purchase-flow",children:"Explore the Purchase Flow Example"})}),"\n",(0,r.jsxs)(n.li,{children:["Learn about ",(0,r.jsx)(n.a,{href:"../api/error-handling",children:"Error Handling"})]}),"\n",(0,r.jsxs)(n.li,{children:["See ",(0,r.jsx)(n.a,{href:"../guides/purchases",children:"Best Practices for Purchases"})]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);