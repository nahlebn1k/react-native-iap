"use strict";(self.webpackChunkreact_native_iap_docs=self.webpackChunkreact_native_iap_docs||[]).push([[5844],{1090:e=>{e.exports=JSON.parse('{"permalink":"/react-native-iap/blog/release-14-1-0","editUrl":"https://github.com/hyochan/react-native-iap/tree/main/docs/blog/2025-09-06-release-14.1.0.md","source":"@site/blog/2025-09-06-release-14.1.0.md","title":"Release 14.1.0 - Type System Improvements & API Enhancements","description":"We\'re excited to announce React Native IAP 14.1.0 with significant type system improvements and API enhancements! \ud83d\ude80","date":"2025-09-06T00:00:00.000Z","tags":[{"inline":false,"label":"Release","permalink":"/react-native-iap/blog/tags/release","description":"New version releases and updates"},{"inline":false,"label":"React Native IAP","permalink":"/react-native-iap/blog/tags/","description":"In-app purchase library for Expo and React Native"},{"inline":false,"label":"Types","permalink":"/react-native-iap/blog/tags/types","description":"TypeScript type definitions and improvements"},{"inline":false,"label":"API","permalink":"/react-native-iap/blog/tags/api","description":"API updates and changes"}],"readingTime":2.67,"hasTruncateMarker":true,"authors":[{"name":"Hyo","title":"React Native IAP Maintainer","url":"https://github.com/hyochan","page":{"permalink":"/react-native-iap/blog/authors/hyochan"},"socials":{"github":"https://github.com/hyochan","linkedin":"https://www.linkedin.com/in/hyochanjang/","x":"https://x.com/hyodotdev"},"imageURL":"https://github.com/hyochan.png","key":"hyochan"}],"frontMatter":{"slug":"release-14-1-0","title":"Release 14.1.0 - Type System Improvements & API Enhancements","authors":["hyochan"],"tags":["release","react-native-iap","types","api"],"date":"2025-09-06T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"Release 14.2.0","permalink":"/react-native-iap/blog/2025/09/10/release-14.2.0"},"nextItem":{"title":"Release 14.0.0 - Expo Plugin Fixes","permalink":"/react-native-iap/blog/release-14-0-0"}}')},4829:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>d});var s=i(1090),r=i(4848),a=i(8453);const t={slug:"release-14-1-0",title:"Release 14.1.0 - Type System Improvements & API Enhancements",authors:["hyochan"],tags:["release","react-native-iap","types","api"],date:new Date("2025-09-06T00:00:00.000Z")},o=void 0,c={authorsImageUrls:[void 0]},d=[{value:"\u26a0\ufe0f Breaking Changes",id:"\ufe0f-breaking-changes",level:2},{value:"1. Platform-Specific Field Naming",id:"1-platform-specific-field-naming",level:3},{value:"2. API Method Changes",id:"2-api-method-changes",level:3},{value:"3. Type System Updates",id:"3-type-system-updates",level:3},{value:"What&#39;s New in v14.1.0",id:"whats-new-in-v1410",level:2},{value:"\ud83c\udfaf Enhanced Type System",id:"-enhanced-type-system",level:3},{value:"Platform-Specific Field Naming Convention",id:"platform-specific-field-naming-convention",level:4},{value:"\ud83d\udd04 Common Purchase Fields",id:"-common-purchase-fields",level:3},{value:"\ud83d\udcf1 iOS Product Types",id:"-ios-product-types",level:3},{value:"\ud83d\udd04 Purchase States",id:"-purchase-states",level:3},{value:"\ud83d\udccb API Method Updates",id:"-api-method-updates",level:3},{value:"showManageSubscriptionsIOS()",id:"showmanagesubscriptionsios",level:4},{value:"Migration Guide",id:"migration-guide",level:2},{value:"Updating Type References",id:"updating-type-references",level:3},{value:"Using New Purchase States",id:"using-new-purchase-states",level:3},{value:"Handling showManageSubscriptionsIOS Response",id:"handling-showmanagesubscriptionsios-response",level:3},{value:"Benefits",id:"benefits",level:2},{value:"\u2705 Improved Type Safety",id:"-improved-type-safety",level:3},{value:"\u2705 Better Developer Experience",id:"-better-developer-experience",level:3},{value:"\u2705 Enhanced Cross-Platform Support",id:"-enhanced-cross-platform-support",level:3},{value:"\u2705 More Detailed Information",id:"-more-detailed-information",level:3},{value:"Fixed",id:"fixed",level:2},{value:"Upgrading",id:"upgrading",level:2},{value:"Community",id:"community",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"We're excited to announce React Native IAP 14.1.0 with significant type system improvements and API enhancements! \ud83d\ude80"}),"\n",(0,r.jsxs)(n.p,{children:["\u26a0\ufe0f ",(0,r.jsx)(n.strong,{children:"Note: This release contains breaking changes. Please review the migration guide carefully."})]}),"\n",(0,r.jsx)(n.h2,{id:"\ufe0f-breaking-changes",children:"\u26a0\ufe0f Breaking Changes"}),"\n",(0,r.jsx)(n.h3,{id:"1-platform-specific-field-naming",children:"1. Platform-Specific Field Naming"}),"\n",(0,r.jsx)(n.p,{children:"All platform-specific fields now have platform suffixes for clarity."}),"\n",(0,r.jsx)(n.h3,{id:"2-api-method-changes",children:"2. API Method Changes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"showManageSubscriptionsIOS()"})," return type changed from ",(0,r.jsx)(n.code,{children:"Promise<boolean>"})," to ",(0,r.jsx)(n.code,{children:"Promise<NitroPurchase[]>"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"validateReceipt()"})," method signature has been updated"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"3-type-system-updates",children:"3. Type System Updates"}),"\n",(0,r.jsx)(n.p,{children:"Several type definitions have been restructured for better type safety."}),"\n",(0,r.jsx)(n.h2,{id:"whats-new-in-v1410",children:"What's New in v14.1.0"}),"\n",(0,r.jsx)(n.h3,{id:"-enhanced-type-system",children:"\ud83c\udfaf Enhanced Type System"}),"\n",(0,r.jsx)(n.h4,{id:"platform-specific-field-naming-convention",children:"Platform-Specific Field Naming Convention"}),"\n",(0,r.jsx)(n.p,{children:"All platform-specific fields now follow a consistent naming pattern with platform suffixes:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["iOS fields now end with ",(0,r.jsx)(n.code,{children:"IOS"}),":"]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"isFamilyShareable"})," \u2192 ",(0,r.jsx)(n.code,{children:"isFamilyShareableIOS"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"jsonRepresentation"})," \u2192 ",(0,r.jsx)(n.code,{children:"jsonRepresentationIOS"})]}),"\n",(0,r.jsxs)(n.li,{children:["New: ",(0,r.jsx)(n.code,{children:"typeIOS"})," for detailed iOS product types"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["Android fields now end with ",(0,r.jsx)(n.code,{children:"Android"}),":"]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"originalPrice"})," \u2192 ",(0,r.jsx)(n.code,{children:"originalPriceAndroid"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"introductoryPriceValue"})," \u2192 ",(0,r.jsx)(n.code,{children:"introductoryPriceValueAndroid"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"subscriptionPeriod"})," \u2192 ",(0,r.jsx)(n.code,{children:"subscriptionPeriodAndroid"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This change makes it immediately clear which fields are platform-specific, improving code maintainability and reducing confusion."}),"\n",(0,r.jsx)(n.h3,{id:"-common-purchase-fields",children:"\ud83d\udd04 Common Purchase Fields"}),"\n",(0,r.jsxs)(n.p,{children:["Added new common fields to the ",(0,r.jsx)(n.code,{children:"PurchaseCommon"})," type for better cross-platform consistency:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"quantity: number"})," - Purchase quantity (defaults to 1)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"purchaseState: PurchaseState"})," - Unified purchase state across platforms"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"isAutoRenewing: boolean"})," - Auto-renewal status for subscriptions"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"-ios-product-types",children:"\ud83d\udcf1 iOS Product Types"}),"\n",(0,r.jsxs)(n.p,{children:["Introduced ",(0,r.jsx)(n.code,{children:"ProductTypeIOS"})," enum for more granular iOS product categorization:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"enum ProductTypeIOS {\n  consumable = 'consumable',\n  nonConsumable = 'nonConsumable',\n  autoRenewableSubscription = 'autoRenewableSubscription',\n  nonRenewingSubscription = 'nonRenewingSubscription',\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"-purchase-states",children:"\ud83d\udd04 Purchase States"}),"\n",(0,r.jsxs)(n.p,{children:["New unified ",(0,r.jsx)(n.code,{children:"PurchaseState"})," enum for consistent purchase status handling:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"enum PurchaseState {\n  pending = 'pending', // Android: waiting for payment confirmation\n  purchased = 'purchased', // Both: successfully purchased\n  failed = 'failed', // Both: purchase failed/revoked\n  restored = 'restored', // iOS only: restored from previous purchase\n  deferred = 'deferred', // iOS only: waiting for parental approval\n  unknown = 'unknown', // Both: unspecified state\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Platform Notes:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"iOS"}),": StoreKit 2 primarily uses ",(0,r.jsx)(n.code,{children:"purchased"})," state for verified transactions. ",(0,r.jsx)(n.code,{children:"restored"})," and ",(0,r.jsx)(n.code,{children:"deferred"})," states are handled through separate flows."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Android"}),": Supports ",(0,r.jsx)(n.code,{children:"pending"})," (awaiting payment), ",(0,r.jsx)(n.code,{children:"purchased"})," (completed), and ",(0,r.jsx)(n.code,{children:"unknown"})," (unspecified) states directly from the Play Billing Library."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"-api-method-updates",children:"\ud83d\udccb API Method Updates"}),"\n",(0,r.jsx)(n.h4,{id:"showmanagesubscriptionsios",children:"showManageSubscriptionsIOS()"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"showManageSubscriptionsIOS()"})," method now returns updated subscription information:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Before: Promise<boolean>\n// Now: Promise<NitroPurchase[]>\nconst updatedSubscriptions = await showManageSubscriptionsIOS();\n"})}),"\n",(0,r.jsx)(n.p,{children:"This allows you to get real-time subscription status updates after users modify their subscriptions."}),"\n",(0,r.jsx)(n.h2,{id:"migration-guide",children:"Migration Guide"}),"\n",(0,r.jsx)(n.h3,{id:"updating-type-references",children:"Updating Type References"}),"\n",(0,r.jsx)(n.p,{children:"If you're accessing platform-specific fields, update your code:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Before\nif (product.isFamilyShareable) {\n}\nif (product.originalPrice) {\n}\n\n// After\nif (product.isFamilyShareableIOS) {\n}\nif (product.originalPriceAndroid) {\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"using-new-purchase-states",children:"Using New Purchase States"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import {PurchaseState} from 'react-native-iap';\n\nif (purchase.purchaseState === PurchaseState.purchased) {\n  // Handle successful purchase\n} else if (purchase.purchaseState === PurchaseState.pending) {\n  // Handle pending purchase\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"handling-showmanagesubscriptionsios-response",children:"Handling showManageSubscriptionsIOS Response"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Before\nconst success = await showManageSubscriptionsIOS();\nif (success) {\n  // Refresh subscriptions manually\n}\n\n// After\nconst updatedSubscriptions = await showManageSubscriptionsIOS();\n// Use the returned subscription data directly\nupdatedSubscriptions.forEach((sub) => {\n  console.log('Updated subscription:', sub.productId, sub.isAutoRenewing);\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"benefits",children:"Benefits"}),"\n",(0,r.jsx)(n.h3,{id:"-improved-type-safety",children:"\u2705 Improved Type Safety"}),"\n",(0,r.jsx)(n.p,{children:"Platform-specific fields are now clearly marked, reducing runtime errors from accessing wrong platform fields."}),"\n",(0,r.jsx)(n.h3,{id:"-better-developer-experience",children:"\u2705 Better Developer Experience"}),"\n",(0,r.jsx)(n.p,{children:"Consistent naming conventions make the API more predictable and easier to use."}),"\n",(0,r.jsx)(n.h3,{id:"-enhanced-cross-platform-support",children:"\u2705 Enhanced Cross-Platform Support"}),"\n",(0,r.jsxs)(n.p,{children:["Common fields like ",(0,r.jsx)(n.code,{children:"purchaseState"})," and ",(0,r.jsx)(n.code,{children:"isAutoRenewing"})," provide unified interfaces across platforms."]}),"\n",(0,r.jsx)(n.h3,{id:"-more-detailed-information",children:"\u2705 More Detailed Information"}),"\n",(0,r.jsx)(n.p,{children:"New enums and return types provide richer information about products and purchases."}),"\n",(0,r.jsx)(n.h2,{id:"fixed",children:"Fixed"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"iOS: Fetch missing products from StoreKit when not cached"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"upgrading",children:"Upgrading"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install react-native-iap react-native-nitro-modules\n"})}),"\n",(0,r.jsx)(n.h2,{id:"community",children:"Community"}),"\n",(0,r.jsx)(n.p,{children:"Thank you to all contributors who helped make this release possible!"}),"\n",(0,r.jsxs)(n.p,{children:["For questions or issues, please visit our ",(0,r.jsx)(n.a,{href:"https://github.com/hyochan/react-native-iap",children:"GitHub repository"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>o});var s=i(6540);const r={},a=s.createContext(r);function t(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);