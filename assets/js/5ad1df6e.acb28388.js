"use strict";(self.webpackChunkreact_native_iap_docs=self.webpackChunkreact_native_iap_docs||[]).push([[665],{8314:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"guides/expo-plugin","title":"Expo Plugin","description":"react-native-iap comes with a config plugin to automatically configure your project for both iOS and Android. This guide explains how to use it and what it does.","source":"@site/docs/guides/expo-plugin.md","sourceDirName":"guides","slug":"/guides/expo-plugin","permalink":"/react-native-iap/docs/guides/expo-plugin","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/react-native-iap/tree/main/docs/docs/guides/expo-plugin.md","tags":[],"version":"current","frontMatter":{"title":"Expo Plugin"},"sidebar":"tutorialSidebar","previous":{"title":"Error Handling","permalink":"/react-native-iap/docs/guides/error-handling"},"next":{"title":"Troubleshooting","permalink":"/react-native-iap/docs/guides/troubleshooting"}}');var s=i(4848),t=i(8453);const r={title:"Expo Plugin"},d=void 0,l={},c=[{value:"Usage",id:"usage",level:2},{value:"What it does",id:"what-it-does",level:2},{value:"Android",id:"android",level:3},{value:"iOS",id:"ios",level:3},{value:"iOS Folly Workaround",id:"ios-folly-workaround",level:3}];function a(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"react-native-iap"})," comes with a config plugin to automatically configure your project for both iOS and Android. This guide explains how to use it and what it does."]}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsxs)(n.p,{children:["To use the plugin, add it to the ",(0,s.jsx)(n.code,{children:"plugins"})," array in your ",(0,s.jsx)(n.code,{children:"app.json"})," or ",(0,s.jsx)(n.code,{children:"app.config.js"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "expo": {\n    "plugins": ["react-native-iap"]\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"This is the most basic configuration. The plugin also accepts options for local development."}),"\n",(0,s.jsx)(n.h2,{id:"what-it-does",children:"What it does"}),"\n",(0,s.jsx)(n.h3,{id:"android",children:"Android"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Adds the ",(0,s.jsx)(n.code,{children:"com.android.vending.BILLING"})," permission to ",(0,s.jsx)(n.code,{children:"AndroidManifest.xml"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Adds the ",(0,s.jsx)(n.code,{children:"io.github.hyochan.openiap:openiap-google"})," dependency to your app's ",(0,s.jsx)(n.code,{children:"build.gradle"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"ios",children:"iOS"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Ensures the CocoaPods CDN source is present in your ",(0,s.jsx)(n.code,{children:"Podfile"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"Removes any stale local OpenIAP pod entries to avoid conflicts."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"ios-folly-workaround",children:"iOS Folly Workaround"}),"\n",(0,s.jsxs)(n.p,{children:["The plugin includes a workaround (",(0,s.jsx)(n.code,{children:"withIapIosFollyWorkaround"}),") to prevent iOS build failures related to Folly coroutines. This is particularly useful when encountering issues with non-vendored ",(0,s.jsx)(n.code,{children:"<folly/coro/*>"})," headers."]}),"\n",(0,s.jsxs)(n.p,{children:["To enable this workaround, you can pass the ",(0,s.jsx)(n.code,{children:"ios.with-folly-no-coroutines"})," option to the plugin in your ",(0,s.jsx)(n.code,{children:"app.json"})," or ",(0,s.jsx)(n.code,{children:"app.config.js"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "expo": {\n    "plugins": [\n      [\n        "react-native-iap",\n        {\n          "ios": {\n            "with-folly-no-coroutines": true\n          }\n        }\n      ]\n    ]\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["When enabled, this option injects preprocessor definitions (",(0,s.jsx)(n.code,{children:"FOLLY_NO_CONFIG=1"}),", ",(0,s.jsx)(n.code,{children:"FOLLY_CFG_NO_COROUTINES=1"}),", ",(0,s.jsx)(n.code,{children:"FOLLY_HAS_COROUTINES=0"}),") into your Podfile's ",(0,s.jsx)(n.code,{children:"post_install"})," hook. These definitions disable Folly coroutine support, resolving potential build conflicts."]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>d});var o=i(6540);const s={},t=o.createContext(s);function r(e){const n=o.useContext(t);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(t.Provider,{value:n},e.children)}}}]);